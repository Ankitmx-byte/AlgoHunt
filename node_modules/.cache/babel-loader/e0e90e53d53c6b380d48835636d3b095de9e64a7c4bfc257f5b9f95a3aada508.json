{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\AlgoHunt\\\\src\\\\components\\\\PremiumCodeEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './PremiumCodeEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PremiumCodeEditor = ({\n  code = '',\n  language = 'javascript',\n  theme = 'dark',\n  animate = true,\n  typingSpeed = 30,\n  highlightLines = [],\n  showLineNumbers = true,\n  editable = false,\n  onChange = () => {},\n  className = '',\n  ...props\n}) => {\n  _s();\n  const [displayedCode, setDisplayedCode] = useState('');\n  const [currentLine, setCurrentLine] = useState(0);\n  const [currentChar, setCurrentChar] = useState(0);\n  const [isTyping, setIsTyping] = useState(animate);\n  const [activeHighlight, setActiveHighlight] = useState(null);\n  const editorRef = useRef(null);\n  const codeLines = code.split('\\n');\n\n  // Editor classes\n  const editorClasses = ['premium-code-editor', `premium-code-editor-${theme}`, `premium-code-editor-${language}`, editable ? 'premium-code-editor-editable' : '', className].filter(Boolean).join(' ');\n\n  // Typing animation effect\n  useEffect(() => {\n    if (!isTyping) {\n      setDisplayedCode(code);\n      return;\n    }\n    const typingInterval = setInterval(() => {\n      if (currentLine < codeLines.length) {\n        const currentLineText = codeLines[currentLine];\n        if (currentChar < currentLineText.length) {\n          // Type next character\n          setDisplayedCode(prev => prev + (currentChar === 0 && currentLine > 0 ? '\\n' : '') + currentLineText[currentChar]);\n          setCurrentChar(prev => prev + 1);\n        } else {\n          // Move to next line\n          setCurrentLine(prev => prev + 1);\n          setCurrentChar(0);\n        }\n      } else {\n        // Typing complete\n        clearInterval(typingInterval);\n        setIsTyping(false);\n\n        // Start line highlighting if specified\n        if (highlightLines.length > 0) {\n          startLineHighlighting();\n        }\n      }\n    }, typingSpeed);\n    return () => clearInterval(typingInterval);\n  }, [isTyping, currentLine, currentChar, codeLines, code, typingSpeed, highlightLines]);\n\n  // Line highlighting effect\n  const startLineHighlighting = () => {\n    let highlightIndex = 0;\n    const highlightInterval = setInterval(() => {\n      if (highlightIndex < highlightLines.length) {\n        setActiveHighlight(highlightLines[highlightIndex]);\n        highlightIndex++;\n      } else {\n        clearInterval(highlightInterval);\n        setActiveHighlight(null);\n      }\n    }, 1000);\n    return () => clearInterval(highlightInterval);\n  };\n\n  // Syntax highlighting function\n  const highlightSyntax = code => {\n    if (!code) return [];\n    const lines = code.split('\\n');\n    return lines.map((line, lineIndex) => {\n      // Apply different classes based on content\n      const isComment = line.trim().startsWith('//') || line.trim().startsWith('/*');\n      const hasKeyword = /(function|let|const|var|for|if|else|return|class|import|export|from|async|await)/g.test(line);\n      const hasString = /(['\"])(?:(?=(\\\\?))\\2.)*?\\1/g.test(line);\n      const hasNumber = /\\b\\d+\\b/g.test(line);\n\n      // Format the line with syntax highlighting\n      let formattedLine = line;\n\n      // Replace keywords\n      if (hasKeyword) {\n        formattedLine = formattedLine.replace(/(function|let|const|var|for|if|else|return|class|import|export|from|async|await|new|this|try|catch|throw)/g, '<span class=\"code-keyword\">$1</span>');\n      }\n\n      // Replace strings\n      if (hasString) {\n        formattedLine = formattedLine.replace(/(['\"])(?:(?=(\\\\?))\\2.)*?\\1/g, '<span class=\"code-string\">$&</span>');\n      }\n\n      // Replace numbers\n      if (hasNumber) {\n        formattedLine = formattedLine.replace(/\\b(\\d+)\\b/g, '<span class=\"code-number\">$1</span>');\n      }\n\n      // Replace comments\n      if (isComment) {\n        formattedLine = `<span class=\"code-comment\">${line}</span>`;\n      } else {\n        // Replace operators and punctuation\n        formattedLine = formattedLine.replace(/([=+\\-*/<>!&|{}[\\]();:,.])/g, '<span class=\"code-operator\">$1</span>');\n      }\n\n      // Determine if this line should be highlighted\n      const isHighlighted = activeHighlight === lineIndex + 1;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `code-line ${isHighlighted ? 'code-line-highlighted' : ''}`,\n        children: [showLineNumbers && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"code-line-number\",\n          children: lineIndex + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"code-line-content\",\n          dangerouslySetInnerHTML: {\n            __html: formattedLine || '&nbsp;'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, lineIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Handle editable code changes\n  const handleCodeChange = e => {\n    if (editable) {\n      const newCode = e.target.innerText;\n      onChange(newCode);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: editorClasses,\n    ...props,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"premium-code-editor-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"premium-code-editor-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"premium-code-editor-control premium-code-editor-control-close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"premium-code-editor-control premium-code-editor-control-minimize\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"premium-code-editor-control premium-code-editor-control-maximize\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"premium-code-editor-title\",\n        children: [language === 'javascript' && 'script.js', language === 'html' && 'index.html', language === 'css' && 'styles.css', language === 'python' && 'main.py', language === 'java' && 'Main.java']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: editorRef,\n      className: \"premium-code-editor-content\",\n      contentEditable: editable,\n      suppressContentEditableWarning: true,\n      onInput: handleCodeChange,\n      children: [highlightSyntax(displayedCode), isTyping && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"code-cursor\",\n        children: \"|\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s(PremiumCodeEditor, \"BmTZxi7TUi/nJfiN49IIaXa3RxA=\");\n_c = PremiumCodeEditor;\nexport default PremiumCodeEditor;\nvar _c;\n$RefreshReg$(_c, \"PremiumCodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","PremiumCodeEditor","code","language","theme","animate","typingSpeed","highlightLines","showLineNumbers","editable","onChange","className","props","_s","displayedCode","setDisplayedCode","currentLine","setCurrentLine","currentChar","setCurrentChar","isTyping","setIsTyping","activeHighlight","setActiveHighlight","editorRef","codeLines","split","editorClasses","filter","Boolean","join","typingInterval","setInterval","length","currentLineText","prev","clearInterval","startLineHighlighting","highlightIndex","highlightInterval","highlightSyntax","lines","map","line","lineIndex","isComment","trim","startsWith","hasKeyword","test","hasString","hasNumber","formattedLine","replace","isHighlighted","children","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","handleCodeChange","e","newCode","target","innerText","ref","contentEditable","suppressContentEditableWarning","onInput","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/AlgoHunt/src/components/PremiumCodeEditor.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './PremiumCodeEditor.css';\n\nconst PremiumCodeEditor = ({\n  code = '',\n  language = 'javascript',\n  theme = 'dark',\n  animate = true,\n  typingSpeed = 30,\n  highlightLines = [],\n  showLineNumbers = true,\n  editable = false,\n  onChange = () => {},\n  className = '',\n  ...props\n}) => {\n  const [displayedCode, setDisplayedCode] = useState('');\n  const [currentLine, setCurrentLine] = useState(0);\n  const [currentChar, setCurrentChar] = useState(0);\n  const [isTyping, setIsTyping] = useState(animate);\n  const [activeHighlight, setActiveHighlight] = useState(null);\n  const editorRef = useRef(null);\n  const codeLines = code.split('\\n');\n  \n  // Editor classes\n  const editorClasses = [\n    'premium-code-editor',\n    `premium-code-editor-${theme}`,\n    `premium-code-editor-${language}`,\n    editable ? 'premium-code-editor-editable' : '',\n    className\n  ].filter(Boolean).join(' ');\n  \n  // Typing animation effect\n  useEffect(() => {\n    if (!isTyping) {\n      setDisplayedCode(code);\n      return;\n    }\n    \n    const typingInterval = setInterval(() => {\n      if (currentLine < codeLines.length) {\n        const currentLineText = codeLines[currentLine];\n        \n        if (currentChar < currentLineText.length) {\n          // Type next character\n          setDisplayedCode(prev => \n            prev + (currentChar === 0 && currentLine > 0 ? '\\n' : '') + currentLineText[currentChar]\n          );\n          setCurrentChar(prev => prev + 1);\n        } else {\n          // Move to next line\n          setCurrentLine(prev => prev + 1);\n          setCurrentChar(0);\n        }\n      } else {\n        // Typing complete\n        clearInterval(typingInterval);\n        setIsTyping(false);\n        \n        // Start line highlighting if specified\n        if (highlightLines.length > 0) {\n          startLineHighlighting();\n        }\n      }\n    }, typingSpeed);\n    \n    return () => clearInterval(typingInterval);\n  }, [isTyping, currentLine, currentChar, codeLines, code, typingSpeed, highlightLines]);\n  \n  // Line highlighting effect\n  const startLineHighlighting = () => {\n    let highlightIndex = 0;\n    \n    const highlightInterval = setInterval(() => {\n      if (highlightIndex < highlightLines.length) {\n        setActiveHighlight(highlightLines[highlightIndex]);\n        highlightIndex++;\n      } else {\n        clearInterval(highlightInterval);\n        setActiveHighlight(null);\n      }\n    }, 1000);\n    \n    return () => clearInterval(highlightInterval);\n  };\n  \n  // Syntax highlighting function\n  const highlightSyntax = (code) => {\n    if (!code) return [];\n    \n    const lines = code.split('\\n');\n    \n    return lines.map((line, lineIndex) => {\n      // Apply different classes based on content\n      const isComment = line.trim().startsWith('//') || line.trim().startsWith('/*');\n      const hasKeyword = /(function|let|const|var|for|if|else|return|class|import|export|from|async|await)/g.test(line);\n      const hasString = /(['\"])(?:(?=(\\\\?))\\2.)*?\\1/g.test(line);\n      const hasNumber = /\\b\\d+\\b/g.test(line);\n      \n      // Format the line with syntax highlighting\n      let formattedLine = line;\n      \n      // Replace keywords\n      if (hasKeyword) {\n        formattedLine = formattedLine.replace(\n          /(function|let|const|var|for|if|else|return|class|import|export|from|async|await|new|this|try|catch|throw)/g,\n          '<span class=\"code-keyword\">$1</span>'\n        );\n      }\n      \n      // Replace strings\n      if (hasString) {\n        formattedLine = formattedLine.replace(\n          /(['\"])(?:(?=(\\\\?))\\2.)*?\\1/g,\n          '<span class=\"code-string\">$&</span>'\n        );\n      }\n      \n      // Replace numbers\n      if (hasNumber) {\n        formattedLine = formattedLine.replace(\n          /\\b(\\d+)\\b/g,\n          '<span class=\"code-number\">$1</span>'\n        );\n      }\n      \n      // Replace comments\n      if (isComment) {\n        formattedLine = `<span class=\"code-comment\">${line}</span>`;\n      } else {\n        // Replace operators and punctuation\n        formattedLine = formattedLine.replace(\n          /([=+\\-*/<>!&|{}[\\]();:,.])/g,\n          '<span class=\"code-operator\">$1</span>'\n        );\n      }\n      \n      // Determine if this line should be highlighted\n      const isHighlighted = activeHighlight === lineIndex + 1;\n      \n      return (\n        <div \n          key={lineIndex} \n          className={`code-line ${isHighlighted ? 'code-line-highlighted' : ''}`}\n        >\n          {showLineNumbers && (\n            <span className=\"code-line-number\">{lineIndex + 1}</span>\n          )}\n          <span \n            className=\"code-line-content\"\n            dangerouslySetInnerHTML={{ __html: formattedLine || '&nbsp;' }}\n          />\n        </div>\n      );\n    });\n  };\n  \n  // Handle editable code changes\n  const handleCodeChange = (e) => {\n    if (editable) {\n      const newCode = e.target.innerText;\n      onChange(newCode);\n    }\n  };\n  \n  return (\n    <div className={editorClasses} {...props}>\n      <div className=\"premium-code-editor-header\">\n        <div className=\"premium-code-editor-controls\">\n          <span className=\"premium-code-editor-control premium-code-editor-control-close\"></span>\n          <span className=\"premium-code-editor-control premium-code-editor-control-minimize\"></span>\n          <span className=\"premium-code-editor-control premium-code-editor-control-maximize\"></span>\n        </div>\n        <div className=\"premium-code-editor-title\">\n          {language === 'javascript' && 'script.js'}\n          {language === 'html' && 'index.html'}\n          {language === 'css' && 'styles.css'}\n          {language === 'python' && 'main.py'}\n          {language === 'java' && 'Main.java'}\n        </div>\n      </div>\n      \n      <div \n        ref={editorRef}\n        className=\"premium-code-editor-content\"\n        contentEditable={editable}\n        suppressContentEditableWarning={true}\n        onInput={handleCodeChange}\n      >\n        {highlightSyntax(displayedCode)}\n        {isTyping && <span className=\"code-cursor\">|</span>}\n      </div>\n    </div>\n  );\n};\n\nexport default PremiumCodeEditor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
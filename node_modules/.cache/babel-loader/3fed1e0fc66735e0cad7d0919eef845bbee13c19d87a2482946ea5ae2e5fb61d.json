{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\AlgoHunt\\\\src\\\\components\\\\CodeEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './CodeEditor.css';\n\n/**\n * CodeEditor Component\n *\n * This component provides a code editor with syntax highlighting and other features.\n * Due to issues with Monaco Editor, we're using a simple textarea for now.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeEditor = ({\n  code,\n  language = 'javascript',\n  onChange,\n  readOnly = false,\n  theme = 'vs-dark'\n}) => {\n  _s();\n  const [value, setValue] = useState(code);\n\n  // Update internal value when code prop changes\n  useEffect(() => {\n    setValue(code);\n  }, [code]);\n\n  // Handle textarea changes\n  const handleChange = e => {\n    const newValue = e.target.value;\n    setValue(newValue);\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  // Add syntax highlighting class based on language\n  const getLanguageClass = () => {\n    return `language-${language.toLowerCase()}`;\n  };\n\n  // Render fallback textarea if Monaco fails to load\n  if (fallbackMode) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-editor-container fallback\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"code-editor-textarea\",\n        value: code,\n        onChange: e => onChange(e.target.value),\n        readOnly: readOnly,\n        spellCheck: \"false\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"code-editor-container\",\n    ref: containerRef,\n    children: !monacoLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-editor-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading editor...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeEditor, \"DR7pELa9qpiyrx1ZiKMXjaL17T8=\");\n_c = CodeEditor;\nexport default CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CodeEditor","code","language","onChange","readOnly","theme","_s","value","setValue","handleChange","e","newValue","target","getLanguageClass","toLowerCase","fallbackMode","className","children","spellCheck","fileName","_jsxFileName","lineNumber","columnNumber","ref","containerRef","monacoLoaded","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/AlgoHunt/src/components/CodeEditor.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './CodeEditor.css';\n\n/**\n * CodeEditor Component\n *\n * This component provides a code editor with syntax highlighting and other features.\n * Due to issues with Monaco Editor, we're using a simple textarea for now.\n */\nconst CodeEditor = ({\n  code,\n  language = 'javascript',\n  onChange,\n  readOnly = false,\n  theme = 'vs-dark'\n}) => {\n  const [value, setValue] = useState(code);\n\n  // Update internal value when code prop changes\n  useEffect(() => {\n    setValue(code);\n  }, [code]);\n\n  // Handle textarea changes\n  const handleChange = (e) => {\n    const newValue = e.target.value;\n    setValue(newValue);\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  // Add syntax highlighting class based on language\n  const getLanguageClass = () => {\n    return `language-${language.toLowerCase()}`;\n  };\n\n  // Render fallback textarea if Monaco fails to load\n  if (fallbackMode) {\n    return (\n      <div className=\"code-editor-container fallback\">\n        <textarea\n          className=\"code-editor-textarea\"\n          value={code}\n          onChange={(e) => onChange(e.target.value)}\n          readOnly={readOnly}\n          spellCheck=\"false\"\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"code-editor-container\" ref={containerRef}>\n      {!monacoLoaded && (\n        <div className=\"code-editor-loading\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading editor...</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CodeEditor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kBAAkB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AALA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,UAAU,GAAGA,CAAC;EAClBC,IAAI;EACJC,QAAQ,GAAG,YAAY;EACvBC,QAAQ;EACRC,QAAQ,GAAG,KAAK;EAChBC,KAAK,GAAG;AACV,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAACK,IAAI,CAAC;;EAExC;EACAJ,SAAS,CAAC,MAAM;IACdW,QAAQ,CAACP,IAAI,CAAC;EAChB,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMQ,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAM,CAACL,KAAK;IAC/BC,QAAQ,CAACG,QAAQ,CAAC;IAClB,IAAIR,QAAQ,EAAE;MACZA,QAAQ,CAACQ,QAAQ,CAAC;IACpB;EACF,CAAC;;EAED;EACA,MAAME,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,OAAO,YAAYX,QAAQ,CAACY,WAAW,CAAC,CAAC,EAAE;EAC7C,CAAC;;EAED;EACA,IAAIC,YAAY,EAAE;IAChB,oBACEhB,OAAA;MAAKiB,SAAS,EAAC,gCAAgC;MAAAC,QAAA,eAC7ClB,OAAA;QACEiB,SAAS,EAAC,sBAAsB;QAChCT,KAAK,EAAEN,IAAK;QACZE,QAAQ,EAAGO,CAAC,IAAKP,QAAQ,CAACO,CAAC,CAACE,MAAM,CAACL,KAAK,CAAE;QAC1CH,QAAQ,EAAEA,QAAS;QACnBc,UAAU,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV;EAEA,oBACEvB,OAAA;IAAKiB,SAAS,EAAC,uBAAuB;IAACO,GAAG,EAAEC,YAAa;IAAAP,QAAA,EACtD,CAACQ,YAAY,iBACZ1B,OAAA;MAAKiB,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAClClB,OAAA;QAAKiB,SAAS,EAAC;MAAiB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACvCvB,OAAA;QAAAkB,QAAA,EAAG;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChB,EAAA,CArDIN,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AAuDhB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
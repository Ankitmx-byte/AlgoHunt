{"ast":null,"code":"/**\n * Code Compiler Service for Coding Battles\n * \n * This service provides functionality to compile and execute code in various languages.\n * It supports JavaScript, Python, Java, and C++ with appropriate sandboxing.\n */\n\nclass CodeCompilerService {\n  constructor() {\n    this.supportedLanguages = ['javascript', 'python', 'java', 'cpp'];\n    this.compileTimeouts = {\n      javascript: 5000,\n      // 5 seconds\n      python: 5000,\n      java: 10000,\n      cpp: 8000\n    };\n    this.executionTimeouts = {\n      javascript: 3000,\n      // 3 seconds per test case\n      python: 3000,\n      java: 5000,\n      cpp: 3000\n    };\n    this.memoryLimits = {\n      javascript: 128,\n      // MB\n      python: 128,\n      java: 256,\n      cpp: 128\n    };\n    this.isCompiling = false;\n    this.isExecuting = false;\n    this.lastCompileResult = null;\n    this.lastExecutionResults = [];\n  }\n\n  /**\n   * Check if a language is supported\n   * @param {string} language - The programming language\n   * @returns {boolean} - Whether the language is supported\n   */\n  isLanguageSupported(language) {\n    return this.supportedLanguages.includes(language.toLowerCase());\n  }\n\n  /**\n   * Compile code in the specified language\n   * @param {string} code - The source code to compile\n   * @param {string} language - The programming language\n   * @returns {Promise<Object>} - Compilation result\n   */\n  async compileCode(code, language) {\n    if (!this.isLanguageSupported(language)) {\n      return {\n        success: false,\n        error: `Language '${language}' is not supported. Supported languages are: ${this.supportedLanguages.join(', ')}`\n      };\n    }\n    if (this.isCompiling) {\n      return {\n        success: false,\n        error: 'Another compilation is already in progress'\n      };\n    }\n    this.isCompiling = true;\n    try {\n      // In a real implementation, this would send the code to a backend service\n      // For this demo, we'll simulate compilation for different languages\n\n      const result = await this.simulateCompilation(code, language);\n      this.lastCompileResult = result;\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'An unknown error occurred during compilation'\n      };\n    } finally {\n      this.isCompiling = false;\n    }\n  }\n\n  /**\n   * Execute code with the given test cases\n   * @param {string} code - The source code to execute\n   * @param {string} language - The programming language\n   * @param {Array<Object>} testCases - The test cases to run\n   * @returns {Promise<Object>} - Execution results\n   */\n  async executeCode(code, language, testCases) {\n    if (!this.isLanguageSupported(language)) {\n      return {\n        success: false,\n        error: `Language '${language}' is not supported. Supported languages are: ${this.supportedLanguages.join(', ')}`\n      };\n    }\n    if (this.isExecuting) {\n      return {\n        success: false,\n        error: 'Another execution is already in progress'\n      };\n    }\n    this.isExecuting = true;\n    try {\n      // First compile the code if needed\n      if (language === 'java' || language === 'cpp') {\n        const compileResult = await this.compileCode(code, language);\n        if (!compileResult.success) {\n          return compileResult;\n        }\n      }\n\n      // Execute the code with each test case\n      const results = [];\n      let allPassed = true;\n      for (const testCase of testCases) {\n        const result = await this.simulateExecution(code, language, testCase);\n        results.push(result);\n        if (!result.passed) {\n          allPassed = false;\n        }\n      }\n      this.lastExecutionResults = results;\n      return {\n        success: true,\n        results,\n        allPassed\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'An unknown error occurred during execution'\n      };\n    } finally {\n      this.isExecuting = false;\n    }\n  }\n\n  /**\n   * Simulate code compilation\n   * @param {string} code - The source code to compile\n   * @param {string} language - The programming language\n   * @returns {Promise<Object>} - Compilation result\n   */\n  async simulateCompilation(code, language) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // Check for common compilation errors based on language\n        switch (language.toLowerCase()) {\n          case 'javascript':\n            try {\n              // Try to parse the JavaScript code\n              new Function(code);\n              resolve({\n                success: true\n              });\n            } catch (error) {\n              resolve({\n                success: false,\n                error: `JavaScript syntax error: ${error.message}`\n              });\n            }\n            break;\n          case 'python':\n            // Simple Python syntax checks\n            if (code.includes('print ') && !code.includes('print(')) {\n              resolve({\n                success: false,\n                error: \"Python syntax error: 'print' statement requires parentheses in Python 3\"\n              });\n            } else {\n              resolve({\n                success: true\n              });\n            }\n            break;\n          case 'java':\n            // Check for common Java errors\n            if (!code.includes('public class') && !code.includes('class ')) {\n              resolve({\n                success: false,\n                error: \"Java compilation error: No class definition found\"\n              });\n            } else if (!code.includes('public static void main')) {\n              resolve({\n                success: false,\n                error: \"Java compilation error: Missing 'public static void main' method\"\n              });\n            } else {\n              resolve({\n                success: true\n              });\n            }\n            break;\n          case 'cpp':\n            // Check for common C++ errors\n            if (!code.includes('int main')) {\n              resolve({\n                success: false,\n                error: \"C++ compilation error: Missing 'main' function\"\n              });\n            } else if (code.includes('cout') && !code.includes('iostream')) {\n              resolve({\n                success: false,\n                error: \"C++ compilation error: Using 'cout' without including <iostream>\"\n              });\n            } else {\n              resolve({\n                success: true\n              });\n            }\n            break;\n          default:\n            resolve({\n              success: true\n            });\n        }\n      }, 500); // Simulate compilation delay\n    });\n  }\n\n  /**\n   * Simulate code execution with a test case\n   * @param {string} code - The source code to execute\n   * @param {string} language - The programming language\n   * @param {Object} testCase - The test case to run\n   * @returns {Promise<Object>} - Execution result\n   */\n  async simulateExecution(code, language, testCase) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // For JavaScript, we can actually execute the code in a sandboxed environment\n        if (language.toLowerCase() === 'javascript') {\n          try {\n            // Create a sandboxed function from the code\n            const userFunction = this.createSandboxedFunction(code);\n\n            // Parse the input\n            const input = this.parseInput(testCase.input);\n\n            // Execute the function with the input\n            const output = userFunction(...input);\n\n            // Compare with expected output\n            const expectedOutput = this.parseOutput(testCase.expectedOutput);\n            const passed = this.compareOutputs(output, expectedOutput);\n            resolve({\n              id: testCase.id,\n              input: testCase.input,\n              expectedOutput: testCase.expectedOutput,\n              actualOutput: JSON.stringify(output),\n              passed,\n              error: null\n            });\n          } catch (error) {\n            resolve({\n              id: testCase.id,\n              input: testCase.input,\n              expectedOutput: testCase.expectedOutput,\n              actualOutput: null,\n              passed: false,\n              error: `Runtime error: ${error.message}`\n            });\n          }\n        } else {\n          // For other languages, simulate execution\n          // In a real implementation, this would send the code to a backend service\n\n          // Simulate a 70% chance of passing each test\n          const passed = Math.random() > 0.3;\n          resolve({\n            id: testCase.id,\n            input: testCase.input,\n            expectedOutput: testCase.expectedOutput,\n            actualOutput: passed ? testCase.expectedOutput : \"Incorrect output\",\n            passed,\n            error: passed ? null : \"Output does not match expected result\"\n          });\n        }\n      }, 1000); // Simulate execution delay\n    });\n  }\n\n  /**\n   * Create a sandboxed function from JavaScript code\n   * @param {string} code - The JavaScript code\n   * @returns {Function} - The sandboxed function\n   */\n  createSandboxedFunction(code) {\n    // Extract the function body from the code\n    // This is a simplified approach and would need more robust parsing in a real implementation\n    let functionBody = code;\n\n    // If the code contains a function declaration, extract just the body\n    if (code.includes('function')) {\n      const functionMatch = code.match(/function\\s+\\w*\\s*\\(([^)]*)\\)\\s*{([\\s\\S]*)}/);\n      if (functionMatch) {\n        functionBody = functionMatch[2];\n      }\n    }\n\n    // Create a new function with the extracted body\n    return new Function('return function solution() { ' + functionBody + ' }')();\n  }\n\n  /**\n   * Parse input string into JavaScript values\n   * @param {string} input - The input string\n   * @returns {Array} - The parsed input values\n   */\n  parseInput(input) {\n    try {\n      // Handle array inputs\n      if (input.trim().startsWith('[')) {\n        return [JSON.parse(input)];\n      }\n\n      // Handle multiple comma-separated values\n      return input.split(',').map(item => {\n        try {\n          return JSON.parse(item.trim());\n        } catch (e) {\n          return item.trim();\n        }\n      });\n    } catch (error) {\n      return [input];\n    }\n  }\n\n  /**\n   * Parse expected output string into JavaScript value\n   * @param {string} output - The expected output string\n   * @returns {*} - The parsed output value\n   */\n  parseOutput(output) {\n    try {\n      return JSON.parse(output);\n    } catch (error) {\n      return output;\n    }\n  }\n\n  /**\n   * Compare actual output with expected output\n   * @param {*} actual - The actual output\n   * @param {*} expected - The expected output\n   * @returns {boolean} - Whether the outputs match\n   */\n  compareOutputs(actual, expected) {\n    // Handle arrays\n    if (Array.isArray(actual) && Array.isArray(expected)) {\n      if (actual.length !== expected.length) return false;\n      return actual.every((val, index) => this.compareOutputs(val, expected[index]));\n    }\n\n    // Handle objects\n    if (typeof actual === 'object' && actual !== null && typeof expected === 'object' && expected !== null) {\n      const actualKeys = Object.keys(actual);\n      const expectedKeys = Object.keys(expected);\n      if (actualKeys.length !== expectedKeys.length) return false;\n      return actualKeys.every(key => expectedKeys.includes(key) && this.compareOutputs(actual[key], expected[key]));\n    }\n\n    // Handle primitive values\n    return actual === expected;\n  }\n}\n\n// Create a singleton instance\nconst codeCompilerService = new CodeCompilerService();\nexport default codeCompilerService;","map":{"version":3,"names":["CodeCompilerService","constructor","supportedLanguages","compileTimeouts","javascript","python","java","cpp","executionTimeouts","memoryLimits","isCompiling","isExecuting","lastCompileResult","lastExecutionResults","isLanguageSupported","language","includes","toLowerCase","compileCode","code","success","error","join","result","simulateCompilation","message","executeCode","testCases","compileResult","results","allPassed","testCase","simulateExecution","push","passed","Promise","resolve","setTimeout","Function","userFunction","createSandboxedFunction","input","parseInput","output","expectedOutput","parseOutput","compareOutputs","id","actualOutput","JSON","stringify","Math","random","functionBody","functionMatch","match","trim","startsWith","parse","split","map","item","e","actual","expected","Array","isArray","length","every","val","index","actualKeys","Object","keys","expectedKeys","key","codeCompilerService"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/AlgoHunt/src/services/CodeCompilerService.js"],"sourcesContent":["/**\n * Code Compiler Service for Coding Battles\n * \n * This service provides functionality to compile and execute code in various languages.\n * It supports JavaScript, Python, Java, and C++ with appropriate sandboxing.\n */\n\nclass CodeCompilerService {\n  constructor() {\n    this.supportedLanguages = ['javascript', 'python', 'java', 'cpp'];\n    this.compileTimeouts = {\n      javascript: 5000, // 5 seconds\n      python: 5000,\n      java: 10000,\n      cpp: 8000\n    };\n    this.executionTimeouts = {\n      javascript: 3000, // 3 seconds per test case\n      python: 3000,\n      java: 5000,\n      cpp: 3000\n    };\n    this.memoryLimits = {\n      javascript: 128, // MB\n      python: 128,\n      java: 256,\n      cpp: 128\n    };\n    this.isCompiling = false;\n    this.isExecuting = false;\n    this.lastCompileResult = null;\n    this.lastExecutionResults = [];\n  }\n\n  /**\n   * Check if a language is supported\n   * @param {string} language - The programming language\n   * @returns {boolean} - Whether the language is supported\n   */\n  isLanguageSupported(language) {\n    return this.supportedLanguages.includes(language.toLowerCase());\n  }\n\n  /**\n   * Compile code in the specified language\n   * @param {string} code - The source code to compile\n   * @param {string} language - The programming language\n   * @returns {Promise<Object>} - Compilation result\n   */\n  async compileCode(code, language) {\n    if (!this.isLanguageSupported(language)) {\n      return {\n        success: false,\n        error: `Language '${language}' is not supported. Supported languages are: ${this.supportedLanguages.join(', ')}`\n      };\n    }\n\n    if (this.isCompiling) {\n      return {\n        success: false,\n        error: 'Another compilation is already in progress'\n      };\n    }\n\n    this.isCompiling = true;\n    \n    try {\n      // In a real implementation, this would send the code to a backend service\n      // For this demo, we'll simulate compilation for different languages\n      \n      const result = await this.simulateCompilation(code, language);\n      this.lastCompileResult = result;\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'An unknown error occurred during compilation'\n      };\n    } finally {\n      this.isCompiling = false;\n    }\n  }\n\n  /**\n   * Execute code with the given test cases\n   * @param {string} code - The source code to execute\n   * @param {string} language - The programming language\n   * @param {Array<Object>} testCases - The test cases to run\n   * @returns {Promise<Object>} - Execution results\n   */\n  async executeCode(code, language, testCases) {\n    if (!this.isLanguageSupported(language)) {\n      return {\n        success: false,\n        error: `Language '${language}' is not supported. Supported languages are: ${this.supportedLanguages.join(', ')}`\n      };\n    }\n\n    if (this.isExecuting) {\n      return {\n        success: false,\n        error: 'Another execution is already in progress'\n      };\n    }\n\n    this.isExecuting = true;\n    \n    try {\n      // First compile the code if needed\n      if (language === 'java' || language === 'cpp') {\n        const compileResult = await this.compileCode(code, language);\n        if (!compileResult.success) {\n          return compileResult;\n        }\n      }\n      \n      // Execute the code with each test case\n      const results = [];\n      let allPassed = true;\n      \n      for (const testCase of testCases) {\n        const result = await this.simulateExecution(code, language, testCase);\n        results.push(result);\n        \n        if (!result.passed) {\n          allPassed = false;\n        }\n      }\n      \n      this.lastExecutionResults = results;\n      \n      return {\n        success: true,\n        results,\n        allPassed\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'An unknown error occurred during execution'\n      };\n    } finally {\n      this.isExecuting = false;\n    }\n  }\n\n  /**\n   * Simulate code compilation\n   * @param {string} code - The source code to compile\n   * @param {string} language - The programming language\n   * @returns {Promise<Object>} - Compilation result\n   */\n  async simulateCompilation(code, language) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        // Check for common compilation errors based on language\n        switch (language.toLowerCase()) {\n          case 'javascript':\n            try {\n              // Try to parse the JavaScript code\n              new Function(code);\n              resolve({ success: true });\n            } catch (error) {\n              resolve({\n                success: false,\n                error: `JavaScript syntax error: ${error.message}`\n              });\n            }\n            break;\n            \n          case 'python':\n            // Simple Python syntax checks\n            if (code.includes('print ') && !code.includes('print(')) {\n              resolve({\n                success: false,\n                error: \"Python syntax error: 'print' statement requires parentheses in Python 3\"\n              });\n            } else {\n              resolve({ success: true });\n            }\n            break;\n            \n          case 'java':\n            // Check for common Java errors\n            if (!code.includes('public class') && !code.includes('class ')) {\n              resolve({\n                success: false,\n                error: \"Java compilation error: No class definition found\"\n              });\n            } else if (!code.includes('public static void main')) {\n              resolve({\n                success: false,\n                error: \"Java compilation error: Missing 'public static void main' method\"\n              });\n            } else {\n              resolve({ success: true });\n            }\n            break;\n            \n          case 'cpp':\n            // Check for common C++ errors\n            if (!code.includes('int main')) {\n              resolve({\n                success: false,\n                error: \"C++ compilation error: Missing 'main' function\"\n              });\n            } else if (code.includes('cout') && !code.includes('iostream')) {\n              resolve({\n                success: false,\n                error: \"C++ compilation error: Using 'cout' without including <iostream>\"\n              });\n            } else {\n              resolve({ success: true });\n            }\n            break;\n            \n          default:\n            resolve({ success: true });\n        }\n      }, 500); // Simulate compilation delay\n    });\n  }\n\n  /**\n   * Simulate code execution with a test case\n   * @param {string} code - The source code to execute\n   * @param {string} language - The programming language\n   * @param {Object} testCase - The test case to run\n   * @returns {Promise<Object>} - Execution result\n   */\n  async simulateExecution(code, language, testCase) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        // For JavaScript, we can actually execute the code in a sandboxed environment\n        if (language.toLowerCase() === 'javascript') {\n          try {\n            // Create a sandboxed function from the code\n            const userFunction = this.createSandboxedFunction(code);\n            \n            // Parse the input\n            const input = this.parseInput(testCase.input);\n            \n            // Execute the function with the input\n            const output = userFunction(...input);\n            \n            // Compare with expected output\n            const expectedOutput = this.parseOutput(testCase.expectedOutput);\n            const passed = this.compareOutputs(output, expectedOutput);\n            \n            resolve({\n              id: testCase.id,\n              input: testCase.input,\n              expectedOutput: testCase.expectedOutput,\n              actualOutput: JSON.stringify(output),\n              passed,\n              error: null\n            });\n          } catch (error) {\n            resolve({\n              id: testCase.id,\n              input: testCase.input,\n              expectedOutput: testCase.expectedOutput,\n              actualOutput: null,\n              passed: false,\n              error: `Runtime error: ${error.message}`\n            });\n          }\n        } else {\n          // For other languages, simulate execution\n          // In a real implementation, this would send the code to a backend service\n          \n          // Simulate a 70% chance of passing each test\n          const passed = Math.random() > 0.3;\n          \n          resolve({\n            id: testCase.id,\n            input: testCase.input,\n            expectedOutput: testCase.expectedOutput,\n            actualOutput: passed ? testCase.expectedOutput : \"Incorrect output\",\n            passed,\n            error: passed ? null : \"Output does not match expected result\"\n          });\n        }\n      }, 1000); // Simulate execution delay\n    });\n  }\n\n  /**\n   * Create a sandboxed function from JavaScript code\n   * @param {string} code - The JavaScript code\n   * @returns {Function} - The sandboxed function\n   */\n  createSandboxedFunction(code) {\n    // Extract the function body from the code\n    // This is a simplified approach and would need more robust parsing in a real implementation\n    let functionBody = code;\n    \n    // If the code contains a function declaration, extract just the body\n    if (code.includes('function')) {\n      const functionMatch = code.match(/function\\s+\\w*\\s*\\(([^)]*)\\)\\s*{([\\s\\S]*)}/);\n      if (functionMatch) {\n        functionBody = functionMatch[2];\n      }\n    }\n    \n    // Create a new function with the extracted body\n    return new Function('return function solution() { ' + functionBody + ' }')();\n  }\n\n  /**\n   * Parse input string into JavaScript values\n   * @param {string} input - The input string\n   * @returns {Array} - The parsed input values\n   */\n  parseInput(input) {\n    try {\n      // Handle array inputs\n      if (input.trim().startsWith('[')) {\n        return [JSON.parse(input)];\n      }\n      \n      // Handle multiple comma-separated values\n      return input.split(',').map(item => {\n        try {\n          return JSON.parse(item.trim());\n        } catch (e) {\n          return item.trim();\n        }\n      });\n    } catch (error) {\n      return [input];\n    }\n  }\n\n  /**\n   * Parse expected output string into JavaScript value\n   * @param {string} output - The expected output string\n   * @returns {*} - The parsed output value\n   */\n  parseOutput(output) {\n    try {\n      return JSON.parse(output);\n    } catch (error) {\n      return output;\n    }\n  }\n\n  /**\n   * Compare actual output with expected output\n   * @param {*} actual - The actual output\n   * @param {*} expected - The expected output\n   * @returns {boolean} - Whether the outputs match\n   */\n  compareOutputs(actual, expected) {\n    // Handle arrays\n    if (Array.isArray(actual) && Array.isArray(expected)) {\n      if (actual.length !== expected.length) return false;\n      return actual.every((val, index) => this.compareOutputs(val, expected[index]));\n    }\n    \n    // Handle objects\n    if (typeof actual === 'object' && actual !== null && \n        typeof expected === 'object' && expected !== null) {\n      const actualKeys = Object.keys(actual);\n      const expectedKeys = Object.keys(expected);\n      \n      if (actualKeys.length !== expectedKeys.length) return false;\n      \n      return actualKeys.every(key => \n        expectedKeys.includes(key) && this.compareOutputs(actual[key], expected[key])\n      );\n    }\n    \n    // Handle primitive values\n    return actual === expected;\n  }\n}\n\n// Create a singleton instance\nconst codeCompilerService = new CodeCompilerService();\n\nexport default codeCompilerService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
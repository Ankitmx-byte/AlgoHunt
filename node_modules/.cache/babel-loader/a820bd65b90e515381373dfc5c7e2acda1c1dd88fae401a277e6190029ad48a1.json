{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\AlgoHunt\\\\src\\\\components\\\\CodeAnimationEffect.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './CodeAnimationEffect.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeAnimationEffect = () => {\n  _s();\n  const [typedCode, setTypedCode] = useState('');\n  const [currentLine, setCurrentLine] = useState(0);\n  const [isTyping, setIsTyping] = useState(true);\n  const [showCursor, setShowCursor] = useState(true);\n  const [highlightLine, setHighlightLine] = useState(null);\n\n  // Sample code to animate\n  const codeLines = ['function findOptimalSolution(array) {', '  // Initialize variables', '  let result = [];', '  let current = 0;', '  let best = -Infinity;', '', '  // Iterate through the array', '  for (let i = 0; i < array.length; i++) {', '    // Update current sum', '    current = Math.max(array[i], current + array[i]);', '    ', '    // Update best result if needed', '    best = Math.max(best, current);', '    ', '    // Add to result if it improves solution', '    if (current > 0) {', '      result.push(array[i]);', '    }', '  }', '', '  // Return the optimal solution', '  return { result, maxSum: best };', '}'];\n\n  // Typing effect\n  useEffect(() => {\n    if (!isTyping) return;\n    const typingInterval = setInterval(() => {\n      if (currentLine < codeLines.length) {\n        setTypedCode(prev => prev + codeLines[currentLine] + '\\n');\n        setCurrentLine(prev => prev + 1);\n      } else {\n        setIsTyping(false);\n        // Start highlighting lines after typing is complete\n        setTimeout(() => {\n          runCodeExecution();\n        }, 1000);\n      }\n    }, 150); // Adjust typing speed here\n\n    return () => clearInterval(typingInterval);\n  }, [currentLine, isTyping]);\n\n  // Cursor blinking effect\n  useEffect(() => {\n    const cursorInterval = setInterval(() => {\n      setShowCursor(prev => !prev);\n    }, 500);\n    return () => clearInterval(cursorInterval);\n  }, []);\n\n  // Simulate code execution with line highlighting\n  const runCodeExecution = () => {\n    const executionSequence = [7, 8, 9, 12, 15, 16, 7, 8, 9, 12, 15, 16, 20];\n    let step = 0;\n    const executionInterval = setInterval(() => {\n      if (step < executionSequence.length) {\n        setHighlightLine(executionSequence[step]);\n        step++;\n      } else {\n        setHighlightLine(null);\n        clearInterval(executionInterval);\n\n        // Restart the animation after a pause\n        setTimeout(() => {\n          setTypedCode('');\n          setCurrentLine(0);\n          setIsTyping(true);\n        }, 3000);\n      }\n    }, 600);\n  };\n\n  // Format the code with syntax highlighting\n  const formatCode = () => {\n    if (!typedCode) return null;\n    return typedCode.split('\\n').map((line, index) => {\n      // Apply different classes based on content\n      const isComment = line.trim().startsWith('//');\n      const hasKeyword = /(function|let|const|for|if|return)/g.test(line);\n      const hasString = /\"([^\"\\\\]|\\\\.)*\"/g.test(line);\n      const hasNumber = /\\d+/g.test(line);\n\n      // Determine if this line should be highlighted\n      const isHighlighted = index === highlightLine;\n\n      // Apply line-specific classes\n      const lineClass = `code-line ${isHighlighted ? 'highlight' : ''} ${isComment ? 'comment' : ''}`;\n\n      // Format the line with syntax highlighting\n      let formattedLine = line;\n      if (hasKeyword) {\n        formattedLine = formattedLine.replace(/(function|let|const|for|if|return|Math)/g, '<span class=\"keyword\">$1</span>');\n      }\n      if (hasString) {\n        formattedLine = formattedLine.replace(/\"([^\"\\\\]|\\\\.)*\"/g, '<span class=\"string\">$&</span>');\n      }\n      if (hasNumber) {\n        formattedLine = formattedLine.replace(/\\b(\\d+)\\b/g, '<span class=\"number\">$1</span>');\n      }\n\n      // Highlight operators\n      formattedLine = formattedLine.replace(/([=+\\-*/<>!&|{}[\\]();:,.])/g, '<span class=\"operator\">$1</span>');\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: lineClass,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"line-number\",\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          dangerouslySetInnerHTML: {\n            __html: formattedLine || '&nbsp;'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"code-animation-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code-title\",\n        children: \"algorithm.js\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"control close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"control minimize\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"control maximize\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-editor\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code-content\",\n        children: [formatCode(), isTyping && showCursor && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"code-cursor\",\n          children: \"|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeAnimationEffect, \"DFExbx8fghbPCFMyukv226Pyl40=\");\n_c = CodeAnimationEffect;\nexport default CodeAnimationEffect;\nvar _c;\n$RefreshReg$(_c, \"CodeAnimationEffect\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CodeAnimationEffect","_s","typedCode","setTypedCode","currentLine","setCurrentLine","isTyping","setIsTyping","showCursor","setShowCursor","highlightLine","setHighlightLine","codeLines","typingInterval","setInterval","length","prev","setTimeout","runCodeExecution","clearInterval","cursorInterval","executionSequence","step","executionInterval","formatCode","split","map","line","index","isComment","trim","startsWith","hasKeyword","test","hasString","hasNumber","isHighlighted","lineClass","formattedLine","replace","className","children","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/AlgoHunt/src/components/CodeAnimationEffect.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './CodeAnimationEffect.css';\n\nconst CodeAnimationEffect = () => {\n  const [typedCode, setTypedCode] = useState('');\n  const [currentLine, setCurrentLine] = useState(0);\n  const [isTyping, setIsTyping] = useState(true);\n  const [showCursor, setShowCursor] = useState(true);\n  const [highlightLine, setHighlightLine] = useState(null);\n  \n  // Sample code to animate\n  const codeLines = [\n    'function findOptimalSolution(array) {',\n    '  // Initialize variables',\n    '  let result = [];',\n    '  let current = 0;',\n    '  let best = -Infinity;',\n    '',\n    '  // Iterate through the array',\n    '  for (let i = 0; i < array.length; i++) {',\n    '    // Update current sum',\n    '    current = Math.max(array[i], current + array[i]);',\n    '    ',\n    '    // Update best result if needed',\n    '    best = Math.max(best, current);',\n    '    ',\n    '    // Add to result if it improves solution',\n    '    if (current > 0) {',\n    '      result.push(array[i]);',\n    '    }',\n    '  }',\n    '',\n    '  // Return the optimal solution',\n    '  return { result, maxSum: best };',\n    '}'\n  ];\n  \n  // Typing effect\n  useEffect(() => {\n    if (!isTyping) return;\n    \n    const typingInterval = setInterval(() => {\n      if (currentLine < codeLines.length) {\n        setTypedCode(prev => prev + codeLines[currentLine] + '\\n');\n        setCurrentLine(prev => prev + 1);\n      } else {\n        setIsTyping(false);\n        // Start highlighting lines after typing is complete\n        setTimeout(() => {\n          runCodeExecution();\n        }, 1000);\n      }\n    }, 150); // Adjust typing speed here\n    \n    return () => clearInterval(typingInterval);\n  }, [currentLine, isTyping]);\n  \n  // Cursor blinking effect\n  useEffect(() => {\n    const cursorInterval = setInterval(() => {\n      setShowCursor(prev => !prev);\n    }, 500);\n    \n    return () => clearInterval(cursorInterval);\n  }, []);\n  \n  // Simulate code execution with line highlighting\n  const runCodeExecution = () => {\n    const executionSequence = [7, 8, 9, 12, 15, 16, 7, 8, 9, 12, 15, 16, 20];\n    let step = 0;\n    \n    const executionInterval = setInterval(() => {\n      if (step < executionSequence.length) {\n        setHighlightLine(executionSequence[step]);\n        step++;\n      } else {\n        setHighlightLine(null);\n        clearInterval(executionInterval);\n        \n        // Restart the animation after a pause\n        setTimeout(() => {\n          setTypedCode('');\n          setCurrentLine(0);\n          setIsTyping(true);\n        }, 3000);\n      }\n    }, 600);\n  };\n  \n  // Format the code with syntax highlighting\n  const formatCode = () => {\n    if (!typedCode) return null;\n    \n    return typedCode.split('\\n').map((line, index) => {\n      // Apply different classes based on content\n      const isComment = line.trim().startsWith('//');\n      const hasKeyword = /(function|let|const|for|if|return)/g.test(line);\n      const hasString = /\"([^\"\\\\]|\\\\.)*\"/g.test(line);\n      const hasNumber = /\\d+/g.test(line);\n      \n      // Determine if this line should be highlighted\n      const isHighlighted = index === highlightLine;\n      \n      // Apply line-specific classes\n      const lineClass = `code-line ${isHighlighted ? 'highlight' : ''} ${isComment ? 'comment' : ''}`;\n      \n      // Format the line with syntax highlighting\n      let formattedLine = line;\n      \n      if (hasKeyword) {\n        formattedLine = formattedLine.replace(\n          /(function|let|const|for|if|return|Math)/g, \n          '<span class=\"keyword\">$1</span>'\n        );\n      }\n      \n      if (hasString) {\n        formattedLine = formattedLine.replace(\n          /\"([^\"\\\\]|\\\\.)*\"/g,\n          '<span class=\"string\">$&</span>'\n        );\n      }\n      \n      if (hasNumber) {\n        formattedLine = formattedLine.replace(\n          /\\b(\\d+)\\b/g,\n          '<span class=\"number\">$1</span>'\n        );\n      }\n      \n      // Highlight operators\n      formattedLine = formattedLine.replace(\n        /([=+\\-*/<>!&|{}[\\]();:,.])/g,\n        '<span class=\"operator\">$1</span>'\n      );\n      \n      return (\n        <div key={index} className={lineClass}>\n          <span className=\"line-number\">{index + 1}</span>\n          <span dangerouslySetInnerHTML={{ __html: formattedLine || '&nbsp;' }} />\n        </div>\n      );\n    });\n  };\n  \n  return (\n    <div className=\"code-animation-container\">\n      <div className=\"code-header\">\n        <div className=\"code-title\">algorithm.js</div>\n        <div className=\"code-controls\">\n          <span className=\"control close\"></span>\n          <span className=\"control minimize\"></span>\n          <span className=\"control maximize\"></span>\n        </div>\n      </div>\n      <div className=\"code-editor\">\n        <div className=\"code-content\">\n          {formatCode()}\n          {isTyping && showCursor && <span className=\"code-cursor\">|</span>}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CodeAnimationEffect;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
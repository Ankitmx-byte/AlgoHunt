{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\AlgoHunt\\\\src\\\\components\\\\CodeEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './CodeEditor.css';\n\n/**\n * CodeEditor Component\n * \n * This component provides a code editor with syntax highlighting and other features.\n * It uses Monaco Editor if available, with a fallback to a textarea.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeEditor = ({\n  code,\n  language = 'javascript',\n  onChange,\n  readOnly = false,\n  theme = 'vs-dark'\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  const containerRef = useRef(null);\n  const [editor, setEditor] = useState(null);\n  const [monacoLoaded, setMonacoLoaded] = useState(false);\n  const [fallbackMode, setFallbackMode] = useState(false);\n\n  // Load Monaco Editor dynamically\n  useEffect(() => {\n    if (typeof window !== 'undefined' && !monacoLoaded && !fallbackMode) {\n      // Try to load Monaco Editor\n      import('monaco-editor').then(monaco => {\n        setMonacoLoaded(true);\n\n        // Create editor instance\n        if (containerRef.current) {\n          const editorInstance = monaco.editor.create(containerRef.current, {\n            value: code,\n            language: getMonacoLanguage(language),\n            theme: theme,\n            automaticLayout: true,\n            minimap: {\n              enabled: false\n            },\n            scrollBeyondLastLine: false,\n            fontSize: 14,\n            tabSize: 2,\n            readOnly: readOnly,\n            wordWrap: 'on',\n            lineNumbers: 'on',\n            glyphMargin: false,\n            folding: true,\n            lineDecorationsWidth: 10,\n            lineNumbersMinChars: 3\n          });\n\n          // Store editor reference\n          editorRef.current = editorInstance;\n          setEditor(editorInstance);\n\n          // Set up change event handler\n          editorInstance.onDidChangeModelContent(() => {\n            if (onChange) {\n              onChange(editorInstance.getValue());\n            }\n          });\n\n          // Clean up on unmount\n          return () => {\n            editorInstance.dispose();\n          };\n        }\n      }).catch(error => {\n        console.error('Failed to load Monaco Editor:', error);\n        setFallbackMode(true);\n      });\n    }\n  }, [code, language, onChange, readOnly, theme, monacoLoaded, fallbackMode]);\n\n  // Update editor content when code prop changes\n  useEffect(() => {\n    if (editor && code !== editor.getValue()) {\n      editor.setValue(code);\n    }\n  }, [code, editor]);\n\n  // Update editor language when language prop changes\n  useEffect(() => {\n    if (editor && monacoLoaded) {\n      const model = editor.getModel();\n      if (model) {\n        window.monaco.editor.setModelLanguage(model, getMonacoLanguage(language));\n      }\n    }\n  }, [language, editor, monacoLoaded]);\n\n  // Helper function to map language to Monaco language\n  const getMonacoLanguage = lang => {\n    const languageMap = {\n      'javascript': 'javascript',\n      'js': 'javascript',\n      'python': 'python',\n      'py': 'python',\n      'java': 'java',\n      'cpp': 'cpp',\n      'c++': 'cpp'\n    };\n    return languageMap[lang.toLowerCase()] || 'plaintext';\n  };\n\n  // Render fallback textarea if Monaco fails to load\n  if (fallbackMode) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-editor-container fallback\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"code-editor-textarea\",\n        value: code,\n        onChange: e => onChange(e.target.value),\n        readOnly: readOnly,\n        spellCheck: \"false\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"code-editor-container\",\n    ref: containerRef,\n    children: !monacoLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-editor-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading editor...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeEditor, \"N2g3nUn0CpTBxIfbJtcHrOS4NoA=\");\n_c = CodeEditor;\nexport default CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","CodeEditor","code","language","onChange","readOnly","theme","_s","editorRef","containerRef","editor","setEditor","monacoLoaded","setMonacoLoaded","fallbackMode","setFallbackMode","window","then","monaco","current","editorInstance","create","value","getMonacoLanguage","automaticLayout","minimap","enabled","scrollBeyondLastLine","fontSize","tabSize","wordWrap","lineNumbers","glyphMargin","folding","lineDecorationsWidth","lineNumbersMinChars","onDidChangeModelContent","getValue","dispose","catch","error","console","setValue","model","getModel","setModelLanguage","lang","languageMap","toLowerCase","className","children","e","target","spellCheck","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/AlgoHunt/src/components/CodeEditor.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './CodeEditor.css';\n\n/**\n * CodeEditor Component\n * \n * This component provides a code editor with syntax highlighting and other features.\n * It uses Monaco Editor if available, with a fallback to a textarea.\n */\nconst CodeEditor = ({ \n  code, \n  language = 'javascript', \n  onChange, \n  readOnly = false,\n  theme = 'vs-dark'\n}) => {\n  const editorRef = useRef(null);\n  const containerRef = useRef(null);\n  const [editor, setEditor] = useState(null);\n  const [monacoLoaded, setMonacoLoaded] = useState(false);\n  const [fallbackMode, setFallbackMode] = useState(false);\n\n  // Load Monaco Editor dynamically\n  useEffect(() => {\n    if (typeof window !== 'undefined' && !monacoLoaded && !fallbackMode) {\n      // Try to load Monaco Editor\n      import('monaco-editor').then(monaco => {\n        setMonacoLoaded(true);\n        \n        // Create editor instance\n        if (containerRef.current) {\n          const editorInstance = monaco.editor.create(containerRef.current, {\n            value: code,\n            language: getMonacoLanguage(language),\n            theme: theme,\n            automaticLayout: true,\n            minimap: { enabled: false },\n            scrollBeyondLastLine: false,\n            fontSize: 14,\n            tabSize: 2,\n            readOnly: readOnly,\n            wordWrap: 'on',\n            lineNumbers: 'on',\n            glyphMargin: false,\n            folding: true,\n            lineDecorationsWidth: 10,\n            lineNumbersMinChars: 3\n          });\n          \n          // Store editor reference\n          editorRef.current = editorInstance;\n          setEditor(editorInstance);\n          \n          // Set up change event handler\n          editorInstance.onDidChangeModelContent(() => {\n            if (onChange) {\n              onChange(editorInstance.getValue());\n            }\n          });\n          \n          // Clean up on unmount\n          return () => {\n            editorInstance.dispose();\n          };\n        }\n      }).catch(error => {\n        console.error('Failed to load Monaco Editor:', error);\n        setFallbackMode(true);\n      });\n    }\n  }, [code, language, onChange, readOnly, theme, monacoLoaded, fallbackMode]);\n\n  // Update editor content when code prop changes\n  useEffect(() => {\n    if (editor && code !== editor.getValue()) {\n      editor.setValue(code);\n    }\n  }, [code, editor]);\n\n  // Update editor language when language prop changes\n  useEffect(() => {\n    if (editor && monacoLoaded) {\n      const model = editor.getModel();\n      if (model) {\n        window.monaco.editor.setModelLanguage(model, getMonacoLanguage(language));\n      }\n    }\n  }, [language, editor, monacoLoaded]);\n\n  // Helper function to map language to Monaco language\n  const getMonacoLanguage = (lang) => {\n    const languageMap = {\n      'javascript': 'javascript',\n      'js': 'javascript',\n      'python': 'python',\n      'py': 'python',\n      'java': 'java',\n      'cpp': 'cpp',\n      'c++': 'cpp'\n    };\n    \n    return languageMap[lang.toLowerCase()] || 'plaintext';\n  };\n\n  // Render fallback textarea if Monaco fails to load\n  if (fallbackMode) {\n    return (\n      <div className=\"code-editor-container fallback\">\n        <textarea\n          className=\"code-editor-textarea\"\n          value={code}\n          onChange={(e) => onChange(e.target.value)}\n          readOnly={readOnly}\n          spellCheck=\"false\"\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"code-editor-container\" ref={containerRef}>\n      {!monacoLoaded && (\n        <div className=\"code-editor-loading\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading editor...</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CodeEditor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
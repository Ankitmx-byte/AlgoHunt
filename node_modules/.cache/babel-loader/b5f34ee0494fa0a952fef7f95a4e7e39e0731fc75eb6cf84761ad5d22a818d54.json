{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\AlgoHunt\\\\src\\\\components\\\\CodeEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport './CodeEditor.css';\n\n/**\n * CodeEditor Component\n *\n * This component provides a code editor with syntax highlighting and other features.\n * It uses a simple textarea as a fallback if Monaco Editor is not available.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeEditor = ({\n  code,\n  language = 'javascript',\n  onChange,\n  readOnly = false,\n  theme = 'vs-dark'\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const [editor, setEditor] = useState(null);\n  const [monacoLoaded, setMonacoLoaded] = useState(false);\n  const [fallbackMode, setFallbackMode] = useState(false);\n  const [monacoInstance, setMonacoInstance] = useState(null);\n\n  // Helper function to map language to Monaco language\n  const getMonacoLanguage = lang => {\n    const languageMap = {\n      'javascript': 'javascript',\n      'js': 'javascript',\n      'python': 'python',\n      'py': 'python',\n      'java': 'java',\n      'cpp': 'cpp',\n      'c++': 'cpp'\n    };\n    return languageMap[lang.toLowerCase()] || 'plaintext';\n  };\n\n  // Load Monaco Editor dynamically\n  useEffect(() => {\n    let isMounted = true;\n    if (typeof window !== 'undefined' && !monacoLoaded && !fallbackMode) {\n      try {\n        // Try to load Monaco Editor\n        import('monaco-editor/esm/vs/editor/editor.api').then(monaco => {\n          if (!isMounted) return;\n\n          // Store monaco instance\n          setMonacoInstance(monaco);\n          setMonacoLoaded(true);\n\n          // Configure Monaco worker paths to avoid the 'toUrl' errors\n          window.MonacoEnvironment = {\n            getWorkerUrl: function (moduleId, label) {\n              if (label === 'json') {\n                return './json.worker.js';\n              }\n              if (label === 'css' || label === 'scss' || label === 'less') {\n                return './css.worker.js';\n              }\n              if (label === 'html' || label === 'handlebars' || label === 'razor') {\n                return './html.worker.js';\n              }\n              if (label === 'typescript' || label === 'javascript') {\n                return './ts.worker.js';\n              }\n              return './editor.worker.js';\n            }\n          };\n        }).catch(error => {\n          console.error('Failed to load Monaco Editor:', error);\n          if (isMounted) {\n            setFallbackMode(true);\n          }\n        });\n      } catch (error) {\n        console.error('Error importing Monaco Editor:', error);\n        if (isMounted) {\n          setFallbackMode(true);\n        }\n      }\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [fallbackMode, monacoLoaded]);\n\n  // Create editor instance once Monaco is loaded and container is ready\n  useEffect(() => {\n    if (monacoLoaded && monacoInstance && containerRef.current && !editor) {\n      try {\n        // Create editor instance\n        const editorInstance = monacoInstance.editor.create(containerRef.current, {\n          value: code,\n          language: getMonacoLanguage(language),\n          theme: theme,\n          automaticLayout: true,\n          minimap: {\n            enabled: false\n          },\n          scrollBeyondLastLine: false,\n          fontSize: 14,\n          tabSize: 2,\n          readOnly: readOnly,\n          wordWrap: 'on',\n          lineNumbers: 'on',\n          glyphMargin: false,\n          folding: true,\n          lineDecorationsWidth: 10,\n          lineNumbersMinChars: 3\n        });\n\n        // Store editor reference\n        setEditor(editorInstance);\n\n        // Set up change event handler\n        editorInstance.onDidChangeModelContent(() => {\n          if (onChange) {\n            onChange(editorInstance.getValue());\n          }\n        });\n\n        // Clean up on unmount\n        return () => {\n          editorInstance.dispose();\n        };\n      } catch (error) {\n        console.error('Error creating Monaco editor instance:', error);\n        setFallbackMode(true);\n      }\n    }\n  }, [monacoLoaded, monacoInstance, containerRef, editor, code, language, theme, readOnly, onChange]);\n\n  // Update editor content when code prop changes\n  useEffect(() => {\n    if (editor && code !== editor.getValue()) {\n      editor.setValue(code);\n    }\n  }, [code, editor]);\n\n  // Update editor language when language prop changes\n  useEffect(() => {\n    if (editor && monacoInstance) {\n      try {\n        const model = editor.getModel();\n        if (model) {\n          monacoInstance.editor.setModelLanguage(model, getMonacoLanguage(language));\n        }\n      } catch (error) {\n        console.error('Error updating editor language:', error);\n      }\n    }\n  }, [language, editor, monacoInstance]);\n\n  // Render fallback textarea if Monaco fails to load\n  if (fallbackMode) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-editor-container fallback\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"code-editor-textarea\",\n        value: code,\n        onChange: e => onChange(e.target.value),\n        readOnly: readOnly,\n        spellCheck: \"false\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"code-editor-container\",\n    ref: containerRef,\n    children: !monacoLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-editor-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading editor...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeEditor, \"zUTzRxddriuLbIP/Yl96Yw/R/iI=\");\n_c = CodeEditor;\nexport default CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","CodeEditor","code","language","onChange","readOnly","theme","_s","containerRef","editor","setEditor","monacoLoaded","setMonacoLoaded","fallbackMode","setFallbackMode","monacoInstance","setMonacoInstance","getMonacoLanguage","lang","languageMap","toLowerCase","isMounted","window","then","monaco","MonacoEnvironment","getWorkerUrl","moduleId","label","catch","error","console","current","editorInstance","create","value","automaticLayout","minimap","enabled","scrollBeyondLastLine","fontSize","tabSize","wordWrap","lineNumbers","glyphMargin","folding","lineDecorationsWidth","lineNumbersMinChars","onDidChangeModelContent","getValue","dispose","setValue","model","getModel","setModelLanguage","className","children","e","target","spellCheck","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/AlgoHunt/src/components/CodeEditor.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './CodeEditor.css';\n\n/**\n * CodeEditor Component\n *\n * This component provides a code editor with syntax highlighting and other features.\n * It uses a simple textarea as a fallback if Monaco Editor is not available.\n */\nconst CodeEditor = ({\n  code,\n  language = 'javascript',\n  onChange,\n  readOnly = false,\n  theme = 'vs-dark'\n}) => {\n  const containerRef = useRef(null);\n  const [editor, setEditor] = useState(null);\n  const [monacoLoaded, setMonacoLoaded] = useState(false);\n  const [fallbackMode, setFallbackMode] = useState(false);\n  const [monacoInstance, setMonacoInstance] = useState(null);\n\n  // Helper function to map language to Monaco language\n  const getMonacoLanguage = (lang) => {\n    const languageMap = {\n      'javascript': 'javascript',\n      'js': 'javascript',\n      'python': 'python',\n      'py': 'python',\n      'java': 'java',\n      'cpp': 'cpp',\n      'c++': 'cpp'\n    };\n\n    return languageMap[lang.toLowerCase()] || 'plaintext';\n  };\n\n  // Load Monaco Editor dynamically\n  useEffect(() => {\n    let isMounted = true;\n\n    if (typeof window !== 'undefined' && !monacoLoaded && !fallbackMode) {\n      try {\n        // Try to load Monaco Editor\n        import('monaco-editor/esm/vs/editor/editor.api').then(monaco => {\n          if (!isMounted) return;\n\n          // Store monaco instance\n          setMonacoInstance(monaco);\n          setMonacoLoaded(true);\n\n          // Configure Monaco worker paths to avoid the 'toUrl' errors\n          window.MonacoEnvironment = {\n            getWorkerUrl: function(moduleId, label) {\n              if (label === 'json') {\n                return './json.worker.js';\n              }\n              if (label === 'css' || label === 'scss' || label === 'less') {\n                return './css.worker.js';\n              }\n              if (label === 'html' || label === 'handlebars' || label === 'razor') {\n                return './html.worker.js';\n              }\n              if (label === 'typescript' || label === 'javascript') {\n                return './ts.worker.js';\n              }\n              return './editor.worker.js';\n            }\n          };\n        }).catch(error => {\n          console.error('Failed to load Monaco Editor:', error);\n          if (isMounted) {\n            setFallbackMode(true);\n          }\n        });\n      } catch (error) {\n        console.error('Error importing Monaco Editor:', error);\n        if (isMounted) {\n          setFallbackMode(true);\n        }\n      }\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [fallbackMode, monacoLoaded]);\n\n  // Create editor instance once Monaco is loaded and container is ready\n  useEffect(() => {\n    if (monacoLoaded && monacoInstance && containerRef.current && !editor) {\n      try {\n        // Create editor instance\n        const editorInstance = monacoInstance.editor.create(containerRef.current, {\n          value: code,\n          language: getMonacoLanguage(language),\n          theme: theme,\n          automaticLayout: true,\n          minimap: { enabled: false },\n          scrollBeyondLastLine: false,\n          fontSize: 14,\n          tabSize: 2,\n          readOnly: readOnly,\n          wordWrap: 'on',\n          lineNumbers: 'on',\n          glyphMargin: false,\n          folding: true,\n          lineDecorationsWidth: 10,\n          lineNumbersMinChars: 3\n        });\n\n        // Store editor reference\n        setEditor(editorInstance);\n\n        // Set up change event handler\n        editorInstance.onDidChangeModelContent(() => {\n          if (onChange) {\n            onChange(editorInstance.getValue());\n          }\n        });\n\n        // Clean up on unmount\n        return () => {\n          editorInstance.dispose();\n        };\n      } catch (error) {\n        console.error('Error creating Monaco editor instance:', error);\n        setFallbackMode(true);\n      }\n    }\n  }, [monacoLoaded, monacoInstance, containerRef, editor, code, language, theme, readOnly, onChange]);\n\n  // Update editor content when code prop changes\n  useEffect(() => {\n    if (editor && code !== editor.getValue()) {\n      editor.setValue(code);\n    }\n  }, [code, editor]);\n\n  // Update editor language when language prop changes\n  useEffect(() => {\n    if (editor && monacoInstance) {\n      try {\n        const model = editor.getModel();\n        if (model) {\n          monacoInstance.editor.setModelLanguage(model, getMonacoLanguage(language));\n        }\n      } catch (error) {\n        console.error('Error updating editor language:', error);\n      }\n    }\n  }, [language, editor, monacoInstance]);\n\n  // Render fallback textarea if Monaco fails to load\n  if (fallbackMode) {\n    return (\n      <div className=\"code-editor-container fallback\">\n        <textarea\n          className=\"code-editor-textarea\"\n          value={code}\n          onChange={(e) => onChange(e.target.value)}\n          readOnly={readOnly}\n          spellCheck=\"false\"\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"code-editor-container\" ref={containerRef}>\n      {!monacoLoaded && (\n        <div className=\"code-editor-loading\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading editor...</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CodeEditor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
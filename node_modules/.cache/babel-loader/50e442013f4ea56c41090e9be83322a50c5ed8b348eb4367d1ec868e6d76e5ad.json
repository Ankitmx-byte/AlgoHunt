{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\AlgoHunt\\\\src\\\\components\\\\CodeAnimation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './CodeAnimation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeAnimation = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas dimensions to match parent container\n    const resizeCanvas = () => {\n      const container = canvas.parentElement;\n      canvas.width = container.offsetWidth;\n      canvas.height = container.offsetHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Matrix-like code rain effect\n    const fontSize = 14;\n    const columns = Math.floor(canvas.width / fontSize);\n\n    // Code snippets to display (more realistic coding)\n    const codeSnippets = ['function quickSort(arr) {', '  if (arr.length <= 1) return arr;', '  const pivot = arr[0];', '  const left = [], right = [];', '  for (let i = 1; i < arr.length; i++) {', '    if (arr[i] < pivot) left.push(arr[i]);', '    else right.push(arr[i]);', '  }', '  return [...quickSort(left), pivot, ...quickSort(right)];', '}', 'class Node {', '  constructor(val) {', '    this.val = val;', '    this.left = null;', '    this.right = null;', '  }', '}', 'const binarySearch = (arr, target) => {', '  let left = 0, right = arr.length - 1;', '  while (left <= right) {', '    const mid = Math.floor((left + right) / 2);', '    if (arr[mid] === target) return mid;', '    if (arr[mid] < target) left = mid + 1;', '    else right = mid - 1;', '  }', '  return -1;', '}', 'const mergeSort = (arr) => {', '  if (arr.length <= 1) return arr;', '  const mid = Math.floor(arr.length / 2);', '  const left = mergeSort(arr.slice(0, mid));', '  const right = mergeSort(arr.slice(mid));', '  return merge(left, right);', '}'];\n\n    // Characters for random code-like effect\n    const chars = '{}[]()<>+-*/=;:,.?|&^%$#@!~`\"\\'\\\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    // Array to track the y position of each column\n    const drops = [];\n    const snippetIndices = [];\n    const useSnippet = [];\n    for (let i = 0; i < columns; i++) {\n      drops[i] = Math.random() * -100;\n      snippetIndices[i] = Math.floor(Math.random() * codeSnippets.length);\n      useSnippet[i] = Math.random() > 0.7; // 30% chance to use a code snippet\n    }\n\n    // Function to draw the animation\n    const draw = () => {\n      // Semi-transparent black background to create trail effect\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Loop through each column\n      for (let i = 0; i < drops.length; i++) {\n        // Determine text color based on position (gradient effect)\n        const hue = i / columns * 120 + 120; // From green (120) to blue (240)\n        ctx.fillStyle = `hsl(${hue}, 100%, 50%)`;\n        ctx.font = `${fontSize}px monospace`;\n        let text;\n        if (useSnippet[i]) {\n          // Use a character from the code snippet\n          const snippetIndex = snippetIndices[i];\n          const snippet = codeSnippets[snippetIndex];\n          const charPosition = Math.floor(drops[i]) % snippet.length;\n          text = snippet[charPosition >= 0 && charPosition < snippet.length ? charPosition : 0];\n        } else {\n          // Generate a random character\n          text = chars[Math.floor(Math.random() * chars.length)];\n        }\n\n        // Draw the character\n        ctx.fillText(text, i * fontSize, drops[i] * fontSize);\n\n        // Move the drop down\n        drops[i] += 0.5;\n\n        // Reset drop to top with random delay when it reaches bottom\n        if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {\n          drops[i] = 0;\n          // Occasionally change whether this column uses a snippet\n          if (Math.random() > 0.9) {\n            useSnippet[i] = Math.random() > 0.7;\n            snippetIndices[i] = Math.floor(Math.random() * codeSnippets.length);\n          }\n        }\n      }\n    };\n\n    // Run the animation\n    const interval = setInterval(draw, 50);\n\n    // Clean up\n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"code-animation-canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 10\n  }, this);\n};\n_s(CodeAnimation, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = CodeAnimation;\nexport default CodeAnimation;\nvar _c;\n$RefreshReg$(_c, \"CodeAnimation\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","CodeAnimation","_s","canvasRef","canvas","current","ctx","getContext","resizeCanvas","container","parentElement","width","offsetWidth","height","offsetHeight","window","addEventListener","fontSize","columns","Math","floor","codeSnippets","chars","drops","snippetIndices","useSnippet","i","random","length","draw","fillStyle","fillRect","hue","font","text","snippetIndex","snippet","charPosition","fillText","interval","setInterval","clearInterval","removeEventListener","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/AlgoHunt/src/components/CodeAnimation.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './CodeAnimation.css';\n\nconst CodeAnimation = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas dimensions to match parent container\n    const resizeCanvas = () => {\n      const container = canvas.parentElement;\n      canvas.width = container.offsetWidth;\n      canvas.height = container.offsetHeight;\n    };\n\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Matrix-like code rain effect\n    const fontSize = 14;\n    const columns = Math.floor(canvas.width / fontSize);\n\n    // Code snippets to display (more realistic coding)\n    const codeSnippets = [\n      'function quickSort(arr) {',\n      '  if (arr.length <= 1) return arr;',\n      '  const pivot = arr[0];',\n      '  const left = [], right = [];',\n      '  for (let i = 1; i < arr.length; i++) {',\n      '    if (arr[i] < pivot) left.push(arr[i]);',\n      '    else right.push(arr[i]);',\n      '  }',\n      '  return [...quickSort(left), pivot, ...quickSort(right)];',\n      '}',\n      'class Node {',\n      '  constructor(val) {',\n      '    this.val = val;',\n      '    this.left = null;',\n      '    this.right = null;',\n      '  }',\n      '}',\n      'const binarySearch = (arr, target) => {',\n      '  let left = 0, right = arr.length - 1;',\n      '  while (left <= right) {',\n      '    const mid = Math.floor((left + right) / 2);',\n      '    if (arr[mid] === target) return mid;',\n      '    if (arr[mid] < target) left = mid + 1;',\n      '    else right = mid - 1;',\n      '  }',\n      '  return -1;',\n      '}',\n      'const mergeSort = (arr) => {',\n      '  if (arr.length <= 1) return arr;',\n      '  const mid = Math.floor(arr.length / 2);',\n      '  const left = mergeSort(arr.slice(0, mid));',\n      '  const right = mergeSort(arr.slice(mid));',\n      '  return merge(left, right);',\n      '}'\n    ];\n\n    // Characters for random code-like effect\n    const chars = '{}[]()<>+-*/=;:,.?|&^%$#@!~`\"\\'\\\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    // Array to track the y position of each column\n    const drops = [];\n    const snippetIndices = [];\n    const useSnippet = [];\n\n    for (let i = 0; i < columns; i++) {\n      drops[i] = Math.random() * -100;\n      snippetIndices[i] = Math.floor(Math.random() * codeSnippets.length);\n      useSnippet[i] = Math.random() > 0.7; // 30% chance to use a code snippet\n    }\n\n    // Function to draw the animation\n    const draw = () => {\n      // Semi-transparent black background to create trail effect\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Loop through each column\n      for (let i = 0; i < drops.length; i++) {\n        // Determine text color based on position (gradient effect)\n        const hue = (i / columns) * 120 + 120; // From green (120) to blue (240)\n        ctx.fillStyle = `hsl(${hue}, 100%, 50%)`;\n        ctx.font = `${fontSize}px monospace`;\n\n        let text;\n        if (useSnippet[i]) {\n          // Use a character from the code snippet\n          const snippetIndex = snippetIndices[i];\n          const snippet = codeSnippets[snippetIndex];\n          const charPosition = Math.floor(drops[i]) % snippet.length;\n          text = snippet[charPosition >= 0 && charPosition < snippet.length ? charPosition : 0];\n        } else {\n          // Generate a random character\n          text = chars[Math.floor(Math.random() * chars.length)];\n        }\n\n        // Draw the character\n        ctx.fillText(text, i * fontSize, drops[i] * fontSize);\n\n        // Move the drop down\n        drops[i] += 0.5;\n\n        // Reset drop to top with random delay when it reaches bottom\n        if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {\n          drops[i] = 0;\n          // Occasionally change whether this column uses a snippet\n          if (Math.random() > 0.9) {\n            useSnippet[i] = Math.random() > 0.7;\n            snippetIndices[i] = Math.floor(Math.random() * codeSnippets.length);\n          }\n        }\n      }\n    };\n\n    // Run the animation\n    const interval = setInterval(draw, 50);\n\n    // Clean up\n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }, []);\n\n  return <canvas ref={canvasRef} className=\"code-animation-canvas\"></canvas>;\n};\n\nexport default CodeAnimation;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,SAAS,GAAGL,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMO,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;;IAEnC;IACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACzB,MAAMC,SAAS,GAAGL,MAAM,CAACM,aAAa;MACtCN,MAAM,CAACO,KAAK,GAAGF,SAAS,CAACG,WAAW;MACpCR,MAAM,CAACS,MAAM,GAAGJ,SAAS,CAACK,YAAY;IACxC,CAAC;IAEDN,YAAY,CAAC,CAAC;IACdO,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAER,YAAY,CAAC;;IAE/C;IACA,MAAMS,QAAQ,GAAG,EAAE;IACnB,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAChB,MAAM,CAACO,KAAK,GAAGM,QAAQ,CAAC;;IAEnD;IACA,MAAMI,YAAY,GAAG,CACnB,2BAA2B,EAC3B,oCAAoC,EACpC,yBAAyB,EACzB,gCAAgC,EAChC,0CAA0C,EAC1C,4CAA4C,EAC5C,8BAA8B,EAC9B,KAAK,EACL,4DAA4D,EAC5D,GAAG,EACH,cAAc,EACd,sBAAsB,EACtB,qBAAqB,EACrB,uBAAuB,EACvB,wBAAwB,EACxB,KAAK,EACL,GAAG,EACH,yCAAyC,EACzC,yCAAyC,EACzC,2BAA2B,EAC3B,iDAAiD,EACjD,0CAA0C,EAC1C,4CAA4C,EAC5C,2BAA2B,EAC3B,KAAK,EACL,cAAc,EACd,GAAG,EACH,8BAA8B,EAC9B,oCAAoC,EACpC,2CAA2C,EAC3C,8CAA8C,EAC9C,4CAA4C,EAC5C,8BAA8B,EAC9B,GAAG,CACJ;;IAED;IACA,MAAMC,KAAK,GAAG,iGAAiG;;IAE/G;IACA,MAAMC,KAAK,GAAG,EAAE;IAChB,MAAMC,cAAc,GAAG,EAAE;IACzB,MAAMC,UAAU,GAAG,EAAE;IAErB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,OAAO,EAAEQ,CAAC,EAAE,EAAE;MAChCH,KAAK,CAACG,CAAC,CAAC,GAAGP,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG;MAC/BH,cAAc,CAACE,CAAC,CAAC,GAAGP,IAAI,CAACC,KAAK,CAACD,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAGN,YAAY,CAACO,MAAM,CAAC;MACnEH,UAAU,CAACC,CAAC,CAAC,GAAGP,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;IACvC;;IAEA;IACA,MAAME,IAAI,GAAGA,CAAA,KAAM;MACjB;MACAvB,GAAG,CAACwB,SAAS,GAAG,qBAAqB;MACrCxB,GAAG,CAACyB,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE3B,MAAM,CAACO,KAAK,EAAEP,MAAM,CAACS,MAAM,CAAC;;MAE/C;MACA,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACK,MAAM,EAAEF,CAAC,EAAE,EAAE;QACrC;QACA,MAAMM,GAAG,GAAIN,CAAC,GAAGR,OAAO,GAAI,GAAG,GAAG,GAAG,CAAC,CAAC;QACvCZ,GAAG,CAACwB,SAAS,GAAG,OAAOE,GAAG,cAAc;QACxC1B,GAAG,CAAC2B,IAAI,GAAG,GAAGhB,QAAQ,cAAc;QAEpC,IAAIiB,IAAI;QACR,IAAIT,UAAU,CAACC,CAAC,CAAC,EAAE;UACjB;UACA,MAAMS,YAAY,GAAGX,cAAc,CAACE,CAAC,CAAC;UACtC,MAAMU,OAAO,GAAGf,YAAY,CAACc,YAAY,CAAC;UAC1C,MAAME,YAAY,GAAGlB,IAAI,CAACC,KAAK,CAACG,KAAK,CAACG,CAAC,CAAC,CAAC,GAAGU,OAAO,CAACR,MAAM;UAC1DM,IAAI,GAAGE,OAAO,CAACC,YAAY,IAAI,CAAC,IAAIA,YAAY,GAAGD,OAAO,CAACR,MAAM,GAAGS,YAAY,GAAG,CAAC,CAAC;QACvF,CAAC,MAAM;UACL;UACAH,IAAI,GAAGZ,KAAK,CAACH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAGL,KAAK,CAACM,MAAM,CAAC,CAAC;QACxD;;QAEA;QACAtB,GAAG,CAACgC,QAAQ,CAACJ,IAAI,EAAER,CAAC,GAAGT,QAAQ,EAAEM,KAAK,CAACG,CAAC,CAAC,GAAGT,QAAQ,CAAC;;QAErD;QACAM,KAAK,CAACG,CAAC,CAAC,IAAI,GAAG;;QAEf;QACA,IAAIH,KAAK,CAACG,CAAC,CAAC,GAAGT,QAAQ,GAAGb,MAAM,CAACS,MAAM,IAAIM,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAG,KAAK,EAAE;UAChEJ,KAAK,CAACG,CAAC,CAAC,GAAG,CAAC;UACZ;UACA,IAAIP,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;YACvBF,UAAU,CAACC,CAAC,CAAC,GAAGP,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAG,GAAG;YACnCH,cAAc,CAACE,CAAC,CAAC,GAAGP,IAAI,CAACC,KAAK,CAACD,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAGN,YAAY,CAACO,MAAM,CAAC;UACrE;QACF;MACF;IACF,CAAC;;IAED;IACA,MAAMW,QAAQ,GAAGC,WAAW,CAACX,IAAI,EAAE,EAAE,CAAC;;IAEtC;IACA,OAAO,MAAM;MACXY,aAAa,CAACF,QAAQ,CAAC;MACvBxB,MAAM,CAAC2B,mBAAmB,CAAC,QAAQ,EAAElC,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOR,OAAA;IAAQ2C,GAAG,EAAExC,SAAU;IAACyC,SAAS,EAAC;EAAuB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AAC5E,CAAC;AAAC9C,EAAA,CA/HID,aAAa;AAAAgD,EAAA,GAAbhD,aAAa;AAiInB,eAAeA,aAAa;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\AlgoHunt\\\\src\\\\components\\\\CodeEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './CodeEditor.css';\n\n/**\n * CodeEditor Component\n *\n * This component provides a code editor with syntax highlighting and other features.\n * Due to issues with Monaco Editor, we're using a simple textarea for now.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeEditor = ({\n  code,\n  language = 'javascript',\n  onChange,\n  readOnly = false,\n  theme = 'vs-dark'\n}) => {\n  _s();\n  const [value, setValue] = useState(code);\n\n  // Update internal value when code prop changes\n  useEffect(() => {\n    setValue(code);\n  }, [code]);\n\n  // Handle textarea changes\n  const handleChange = e => {\n    const newValue = e.target.value;\n    setValue(newValue);\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  // Add syntax highlighting class based on language\n  const getLanguageClass = () => {\n    return `language-${language.toLowerCase()}`;\n  };\n\n  // Render a simple textarea with some styling\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `code-editor-container ${theme}`,\n    children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: `code-editor-textarea ${getLanguageClass()}`,\n      value: value,\n      onChange: handleChange,\n      readOnly: readOnly,\n      spellCheck: \"false\",\n      placeholder: \"Write your code here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeEditor, \"DR7pELa9qpiyrx1ZiKMXjaL17T8=\");\n_c = CodeEditor;\nexport default CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CodeEditor","code","language","onChange","readOnly","theme","_s","value","setValue","handleChange","e","newValue","target","getLanguageClass","toLowerCase","className","children","spellCheck","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/AlgoHunt/src/components/CodeEditor.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './CodeEditor.css';\n\n/**\n * CodeEditor Component\n *\n * This component provides a code editor with syntax highlighting and other features.\n * Due to issues with Monaco Editor, we're using a simple textarea for now.\n */\nconst CodeEditor = ({\n  code,\n  language = 'javascript',\n  onChange,\n  readOnly = false,\n  theme = 'vs-dark'\n}) => {\n  const [value, setValue] = useState(code);\n\n  // Update internal value when code prop changes\n  useEffect(() => {\n    setValue(code);\n  }, [code]);\n\n  // Handle textarea changes\n  const handleChange = (e) => {\n    const newValue = e.target.value;\n    setValue(newValue);\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  // Add syntax highlighting class based on language\n  const getLanguageClass = () => {\n    return `language-${language.toLowerCase()}`;\n  };\n\n  // Render a simple textarea with some styling\n  return (\n    <div className={`code-editor-container ${theme}`}>\n      <textarea\n        className={`code-editor-textarea ${getLanguageClass()}`}\n        value={value}\n        onChange={handleChange}\n        readOnly={readOnly}\n        spellCheck=\"false\"\n        placeholder=\"Write your code here...\"\n      />\n    </div>\n  );\n};\n\nexport default CodeEditor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kBAAkB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AALA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,UAAU,GAAGA,CAAC;EAClBC,IAAI;EACJC,QAAQ,GAAG,YAAY;EACvBC,QAAQ;EACRC,QAAQ,GAAG,KAAK;EAChBC,KAAK,GAAG;AACV,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAACK,IAAI,CAAC;;EAExC;EACAJ,SAAS,CAAC,MAAM;IACdW,QAAQ,CAACP,IAAI,CAAC;EAChB,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMQ,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAM,CAACL,KAAK;IAC/BC,QAAQ,CAACG,QAAQ,CAAC;IAClB,IAAIR,QAAQ,EAAE;MACZA,QAAQ,CAACQ,QAAQ,CAAC;IACpB;EACF,CAAC;;EAED;EACA,MAAME,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,OAAO,YAAYX,QAAQ,CAACY,WAAW,CAAC,CAAC,EAAE;EAC7C,CAAC;;EAED;EACA,oBACEf,OAAA;IAAKgB,SAAS,EAAE,yBAAyBV,KAAK,EAAG;IAAAW,QAAA,eAC/CjB,OAAA;MACEgB,SAAS,EAAE,wBAAwBF,gBAAgB,CAAC,CAAC,EAAG;MACxDN,KAAK,EAAEA,KAAM;MACbJ,QAAQ,EAAEM,YAAa;MACvBL,QAAQ,EAAEA,QAAS;MACnBa,UAAU,EAAC,OAAO;MAClBC,WAAW,EAAC;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAChB,EAAA,CAzCIN,UAAU;AAAAuB,EAAA,GAAVvB,UAAU;AA2ChB,eAAeA,UAAU;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
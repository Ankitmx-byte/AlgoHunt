{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\AlgoHunt\\\\src\\\\components\\\\CodeAnimation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './CodeAnimation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeAnimation = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas dimensions to match parent container\n    const resizeCanvas = () => {\n      const container = canvas.parentElement;\n      canvas.width = container.offsetWidth;\n      canvas.height = container.offsetHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Matrix-like code rain effect\n    const fontSize = 14;\n    const columns = Math.floor(canvas.width / fontSize);\n\n    // Characters to display (coding-related)\n    const chars = '{}[]()<>+-*/=;:,.?|&^%$#@!~`\"\\'\\\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    // Array to track the y position of each column\n    const drops = [];\n    for (let i = 0; i < columns; i++) {\n      drops[i] = Math.random() * -100;\n    }\n\n    // Function to draw the animation\n    const draw = () => {\n      // Semi-transparent black background to create trail effect\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Set text color and font\n      ctx.fillStyle = '#0f0'; // Bright green\n      ctx.font = `${fontSize}px monospace`;\n\n      // Loop through each column\n      for (let i = 0; i < drops.length; i++) {\n        // Generate a random character\n        const text = chars[Math.floor(Math.random() * chars.length)];\n\n        // Draw the character\n        ctx.fillText(text, i * fontSize, drops[i] * fontSize);\n\n        // Move the drop down\n        drops[i]++;\n\n        // Reset drop to top with random delay when it reaches bottom\n        if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {\n          drops[i] = 0;\n        }\n      }\n    };\n\n    // Run the animation\n    const interval = setInterval(draw, 50);\n\n    // Clean up\n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"code-animation-canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 10\n  }, this);\n};\n_s(CodeAnimation, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = CodeAnimation;\nexport default CodeAnimation;\nvar _c;\n$RefreshReg$(_c, \"CodeAnimation\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","CodeAnimation","_s","canvasRef","canvas","current","ctx","getContext","resizeCanvas","container","parentElement","width","offsetWidth","height","offsetHeight","window","addEventListener","fontSize","columns","Math","floor","chars","drops","i","random","draw","fillStyle","fillRect","font","length","text","fillText","interval","setInterval","clearInterval","removeEventListener","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/AlgoHunt/src/components/CodeAnimation.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './CodeAnimation.css';\n\nconst CodeAnimation = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas dimensions to match parent container\n    const resizeCanvas = () => {\n      const container = canvas.parentElement;\n      canvas.width = container.offsetWidth;\n      canvas.height = container.offsetHeight;\n    };\n    \n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n    \n    // Matrix-like code rain effect\n    const fontSize = 14;\n    const columns = Math.floor(canvas.width / fontSize);\n    \n    // Characters to display (coding-related)\n    const chars = '{}[]()<>+-*/=;:,.?|&^%$#@!~`\"\\'\\\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    \n    // Array to track the y position of each column\n    const drops = [];\n    for (let i = 0; i < columns; i++) {\n      drops[i] = Math.random() * -100;\n    }\n    \n    // Function to draw the animation\n    const draw = () => {\n      // Semi-transparent black background to create trail effect\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      // Set text color and font\n      ctx.fillStyle = '#0f0'; // Bright green\n      ctx.font = `${fontSize}px monospace`;\n      \n      // Loop through each column\n      for (let i = 0; i < drops.length; i++) {\n        // Generate a random character\n        const text = chars[Math.floor(Math.random() * chars.length)];\n        \n        // Draw the character\n        ctx.fillText(text, i * fontSize, drops[i] * fontSize);\n        \n        // Move the drop down\n        drops[i]++;\n        \n        // Reset drop to top with random delay when it reaches bottom\n        if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {\n          drops[i] = 0;\n        }\n      }\n    };\n    \n    // Run the animation\n    const interval = setInterval(draw, 50);\n    \n    // Clean up\n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }, []);\n  \n  return <canvas ref={canvasRef} className=\"code-animation-canvas\"></canvas>;\n};\n\nexport default CodeAnimation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\AlgoHunt\\\\src\\\\pages\\\\CodingBattle.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './CodingBattle.css';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport Editor from '@monaco-editor/react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CodingBattle() {\n  _s();\n  const {\n    battleId\n  } = useParams();\n  const navigate = useNavigate();\n  const socketRef = useRef(null);\n  const editorRef = useRef(null);\n\n  // Battle state\n  const [battleState, setBattleState] = useState({\n    status: 'preparing',\n    // preparing, matchmaking, active, completed\n    timeRemaining: 1800,\n    // 30 minutes in seconds\n    problem: null,\n    opponent: null,\n    userCode: '',\n    opponentProgress: 0,\n    userTestResults: null,\n    winner: null,\n    battleType: '1v1',\n    aiAnalysis: null,\n    skillMatchPercentage: null\n  });\n\n  // UI states\n  const [testCases, setTestCases] = useState([]);\n  const [selectedLanguage, setSelectedLanguage] = useState('javascript');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showHint, setShowHint] = useState(false);\n  const [showAiInsights, setShowAiInsights] = useState(false);\n  const [compilerOutput, setCompilerOutput] = useState(null);\n  const [activeTab, setActiveTab] = useState('problem'); // problem, submissions, leaderboard\n  const [runningTest, setRunningTest] = useState(false);\n  const [testResults, setTestResults] = useState([]);\n\n  // Matchmaking states\n  const [showMatchmakingModal, setShowMatchmakingModal] = useState(true);\n  const [matchmaking, setMatchmaking] = useState(false);\n  const [matchFound, setMatchFound] = useState(false);\n  const [selectedDifficulty, setSelectedDifficulty] = useState('medium');\n  const [selectedCategory, setSelectedCategory] = useState('algorithms');\n  const [matchStartError, setMatchStartError] = useState(null);\n  const [queuePosition, setQueuePosition] = useState(null);\n  const [usersInQueue, setUsersInQueue] = useState(0);\n\n  // Add to the state declarations at the top\n  const [isDemoMode, setIsDemoMode] = useState(false);\n\n  // Add state to track the current view\n  const [currentView, setCurrentView] = useState('main'); // 'main', 'matchmaking', 'practice', 'battle'\n\n  // Judge0 API configuration\n  const JUDGE0_API_URL = 'https://judge0-ce.p.rapidapi.com';\n  const JUDGE0_API_KEY = process.env.REACT_APP_JUDGE0_API_KEY || 'your-rapidapi-key';\n\n  // Judge0 language IDs\n  const languageIds = {\n    javascript: 63,\n    // Node.js\n    python: 71,\n    // Python 3\n    java: 62,\n    // Java\n    cpp: 54,\n    // C++\n    csharp: 51 // C#\n  };\n\n  // Language file extensions\n  const languageExtensions = {\n    javascript: 'js',\n    python: 'py',\n    java: 'java',\n    cpp: 'cpp',\n    csharp: 'cs'\n  };\n\n  // Editor themes by language\n  const editorThemes = {\n    javascript: 'vs-dark',\n    python: 'vs-dark',\n    java: 'vs-dark',\n    cpp: 'vs-dark',\n    csharp: 'vs-dark'\n  };\n\n  // Initialize socket connection\n  useEffect(() => {\n    // Connect to the Socket.io server\n    socketRef.current = io('http://localhost:5000', {\n      withCredentials: true,\n      transports: ['websocket']\n    });\n\n    // Socket event listeners\n    socketRef.current.on('connect', () => {\n      console.log('Connected to matchmaking server');\n    });\n    socketRef.current.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n      setMatchStartError('Failed to connect to matchmaking server. Please try again.');\n    });\n    socketRef.current.on('queue_position', data => {\n      setQueuePosition(data.position);\n      setUsersInQueue(data.totalUsers);\n    });\n    socketRef.current.on('match_found', data => {\n      setMatchmaking(false);\n      setMatchFound(true);\n\n      // Set opponent data received from server\n      setBattleState(prev => ({\n        ...prev,\n        opponent: {\n          name: data.opponent.username,\n          rating: data.opponent.rating,\n          winRate: data.opponent.winRate,\n          preferredLanguage: data.opponent.preferredLanguage,\n          skillLevel: `${data.matchPercentage}% match for your skill level`,\n          avatar: data.opponent.avatar || \"https://randomuser.me/api/portraits/men/32.jpg\"\n        },\n        skillMatchPercentage: `${data.matchPercentage}%`\n      }));\n    });\n    socketRef.current.on('battle_started', data => {\n      setShowMatchmakingModal(false);\n\n      // Set battle data received from server\n      setBattleState(prev => ({\n        ...prev,\n        status: 'active',\n        problem: data.problem,\n        userCode: data.problem.starterCode[selectedLanguage] || ''\n      }));\n\n      // Set test cases\n      setTestCases(data.testCases);\n\n      // Navigate to the battle room if needed\n      if (data.battleId && !battleId) {\n        navigate(`/battle/${data.battleId}`, {\n          replace: true\n        });\n      }\n    });\n    socketRef.current.on('opponent_progress', data => {\n      setBattleState(prev => ({\n        ...prev,\n        opponentProgress: data.progress\n      }));\n    });\n    socketRef.current.on('submission_results', data => {\n      setIsSubmitting(false);\n      setTestResults(data.results);\n\n      // Calculate progress based on passed test cases\n      const passedTests = data.results.filter(result => result.passed).length;\n      const totalTests = data.results.length;\n      const progress = Math.floor(passedTests / totalTests * 100);\n\n      // Update progress\n      updateProgress(progress);\n\n      // Check if all tests passed\n      if (data.passed) {\n        // Show success message\n        setCompilerOutput({\n          status: 'success',\n          message: 'All test cases passed! You completed the challenge.'\n        });\n      } else {\n        // Show failure message\n        setCompilerOutput({\n          status: 'error',\n          message: 'Some test cases failed. Keep trying!'\n        });\n      }\n    });\n    socketRef.current.on('battle_completed', data => {\n      setBattleState(prev => ({\n        ...prev,\n        status: 'completed',\n        winner: data.winner,\n        aiAnalysis: data.aiAnalysis\n      }));\n    });\n    socketRef.current.on('opponent_disconnected', () => {\n      // Handle opponent disconnection\n      alert('Your opponent has disconnected. You win by default!');\n      setBattleState(prev => ({\n        ...prev,\n        status: 'completed',\n        winner: 'user'\n      }));\n    });\n\n    // Clean up on component unmount\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n      }\n    };\n  }, [battleId, navigate, selectedLanguage]);\n\n  // Initialize battle when component mounts\n  useEffect(() => {\n    // If battleId is provided, fetch battle details\n    if (battleId) {\n      fetchBattleDetails(battleId);\n    }\n  }, [battleId]);\n\n  // Update editor content when language changes\n  useEffect(() => {\n    if (battleState.problem && battleState.problem.starterCode) {\n      setBattleState(prev => ({\n        ...prev,\n        userCode: battleState.problem.starterCode[selectedLanguage] || ''\n      }));\n    }\n  }, [selectedLanguage, battleState.problem]);\n\n  // Handle editor mount\n  function handleEditorDidMount(editor, monaco) {\n    editorRef.current = editor;\n  }\n\n  // Fetch battle details if joining an existing battle\n  const fetchBattleDetails = async id => {\n    try {\n      // Join the battle room\n      socketRef.current.emit('join_battle', {\n        battleId: id\n      });\n\n      // The server will respond with battle_started event\n      // which is handled in the socket event listeners\n    } catch (error) {\n      console.error(\"Error fetching battle details:\", error);\n      setMatchStartError(\"Failed to load battle details. Please try again.\");\n    }\n  };\n\n  // Start matchmaking process\n  const startMatchmaking = () => {\n    setMatchmaking(true);\n    setMatchStartError(null);\n\n    // Emit matchmaking request to server\n    socketRef.current.emit('find_match', {\n      difficulty: selectedDifficulty,\n      category: selectedCategory,\n      language: selectedLanguage\n    });\n  };\n\n  // Accept the matched opponent and start the battle\n  const acceptMatch = () => {\n    setIsSubmitting(true);\n    setMatchStartError(null);\n\n    // Emit match acceptance to server\n    socketRef.current.emit('accept_match');\n\n    // Set a timeout to handle potential server response delays\n    setTimeout(() => {\n      if (showMatchmakingModal) {\n        console.log(\"Server didn't respond to match acceptance, forcing battle start\");\n        setShowMatchmakingModal(false);\n\n        // Initialize a default battle if the server doesn't respond\n        if (!battleState.problem) {\n          setBattleState(prev => ({\n            ...prev,\n            status: 'active',\n            problem: {\n              id: 1,\n              title: \"Two Sum\",\n              description: \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\",\n              difficulty: selectedDifficulty,\n              category: selectedCategory,\n              starterCode: {\n                javascript: \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nfunction twoSum(nums, target) {\\n  // Your code here\\n}\",\n                python: \"def two_sum(nums, target):\\n    # Your code here\\n    pass\",\n                java: \"class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        // Your code here\\n        return new int[]{0, 0};\\n    }\\n}\",\n                cpp: \"#include <vector>\\n\\nclass Solution {\\npublic:\\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\\n        // Your code here\\n        return {0, 0};\\n    }\\n};\",\n                csharp: \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        // Your code here\\n        return new int[]{0, 0};\\n    }\\n}\"\n              }\n            },\n            userCode: prev.userCode || getDefaultStarterCode(selectedLanguage)\n          }));\n\n          // Set default test cases\n          setTestCases([{\n            id: 1,\n            input: \"[2, 7, 11, 15], 9\",\n            expectedOutput: \"[0,1]\"\n          }, {\n            id: 2,\n            input: \"[3, 2, 4], 6\",\n            expectedOutput: \"[1,2]\"\n          }, {\n            id: 3,\n            input: \"[3, 3], 6\",\n            expectedOutput: \"[0,1]\"\n          }]);\n        }\n      }\n      setIsSubmitting(false);\n    }, 3000);\n  };\n\n  // Decline the match and return to matchmaking\n  const declineMatch = () => {\n    // Emit match decline to server\n    socketRef.current.emit('decline_match');\n    setMatchFound(false);\n    setMatchmaking(false);\n    setMatchStartError(null);\n  };\n\n  // Run code against a single test case\n  const runTestCase = async testCaseId => {\n    if (!editorRef.current) return;\n    setRunningTest(true);\n    setCompilerOutput(null);\n    try {\n      const code = editorRef.current.getValue();\n      const testCase = testCases.find(tc => tc.id === testCaseId);\n      if (!testCase) {\n        throw new Error('Test case not found');\n      }\n\n      // Prepare code with test case\n      const preparedCode = prepareCodeWithTestCase(code, testCase);\n\n      // Submit to Judge0\n      const result = await submitToJudge0(preparedCode);\n\n      // Process result\n      if (result.status.id <= 3) {\n        // Accepted, Wrong Answer, Time Limit Exceeded\n        const output = result.stdout || result.stderr || 'No output';\n        const expectedOutput = testCase.expectedOutput;\n        const passed = output.trim() === expectedOutput.trim();\n        setTestResults(prev => {\n          const newResults = [...prev];\n          const existingIndex = newResults.findIndex(r => r.testCaseId === testCaseId);\n          if (existingIndex >= 0) {\n            newResults[existingIndex] = {\n              testCaseId,\n              passed,\n              output\n            };\n          } else {\n            newResults.push({\n              testCaseId,\n              passed,\n              output\n            });\n          }\n          return newResults;\n        });\n        setCompilerOutput({\n          status: passed ? 'success' : 'error',\n          message: passed ? 'Test passed!' : 'Test failed',\n          output,\n          expectedOutput\n        });\n      } else {\n        // Compilation error or other error\n        setCompilerOutput({\n          status: 'error',\n          message: result.status.description,\n          output: result.stderr || result.compile_output || 'No error details available'\n        });\n      }\n    } catch (error) {\n      console.error('Error running test case:', error);\n      setCompilerOutput({\n        status: 'error',\n        message: 'Failed to run test case',\n        output: error.message\n      });\n    } finally {\n      setRunningTest(false);\n    }\n  };\n\n  // Submit code for testing all test cases\n  const submitCode = async () => {\n    if (!editorRef.current) return;\n    setIsSubmitting(true);\n    setCompilerOutput(null);\n    try {\n      const code = editorRef.current.getValue();\n\n      // Update user code in state\n      setBattleState(prev => ({\n        ...prev,\n        userCode: code\n      }));\n      if (isDemoMode) {\n        // In demo mode, handle code evaluation locally\n        handleDemoModeSubmission(code);\n      } else {\n        // In real mode, emit to server\n        socketRef.current.emit('submit_code', {\n          code,\n          language: selectedLanguage\n        });\n\n        // For demo purposes, simulate if no API key\n        if (!process.env.REACT_APP_JUDGE0_API_KEY) {\n          simulateCodeSubmission(code);\n        }\n      }\n    } catch (error) {\n      console.error('Error submitting code:', error);\n      setIsSubmitting(false);\n      setCompilerOutput({\n        status: 'error',\n        message: 'Failed to submit code',\n        output: error.message\n      });\n    }\n  };\n\n  // Add this function to handle demo mode submissions\n  const handleDemoModeSubmission = async code => {\n    // Simulate processing delay\n    setTimeout(async () => {\n      try {\n        // Run code against all test cases\n        const results = [];\n        for (const testCase of testCases) {\n          // Prepare code with test case\n          const preparedCode = prepareCodeWithTestCase(code, testCase);\n\n          // If Judge0 API key is available, use it\n          let result;\n          if (process.env.REACT_APP_JUDGE0_API_KEY) {\n            result = await submitToJudge0(preparedCode);\n            const output = result.stdout || result.stderr || 'No output';\n            const passed = output.trim() === testCase.expectedOutput.trim();\n            results.push({\n              testCaseId: testCase.id,\n              passed,\n              output\n            });\n          } else {\n            // Otherwise simulate the result\n            // In a real app, you'd use a local code runner or sandbox\n            const passed = Math.random() > 0.3; // 70% chance of passing\n            results.push({\n              testCaseId: testCase.id,\n              passed,\n              output: passed ? testCase.expectedOutput : 'Incorrect output'\n            });\n          }\n        }\n\n        // Calculate if all tests passed\n        const allPassed = results.every(result => result.passed);\n\n        // Calculate progress\n        const passedTests = results.filter(result => result.passed).length;\n        const progress = Math.floor(passedTests / testCases.length * 100);\n\n        // Set test results\n        setTestResults(results);\n\n        // Set compiler output\n        setCompilerOutput({\n          status: allPassed ? 'success' : 'error',\n          message: allPassed ? 'All test cases passed!' : 'Some test cases failed'\n        });\n\n        // If all tests passed in demo mode, check if user won\n        if (allPassed && isDemoMode) {\n          const opponentProgress = battleState.opponentProgress;\n          if (opponentProgress < 100) {\n            // User completed before AI\n            setTimeout(() => {\n              setBattleState(prev => ({\n                ...prev,\n                status: 'completed',\n                winner: 'user',\n                aiAnalysis: \"Congratulations! You solved the problem before the AI opponent.\"\n              }));\n            }, 1000);\n          }\n        }\n      } catch (error) {\n        console.error('Error in demo mode submission:', error);\n        setCompilerOutput({\n          status: 'error',\n          message: 'Error evaluating code',\n          output: error.message\n        });\n      } finally {\n        setIsSubmitting(false);\n      }\n    }, 1500);\n  };\n\n  // Prepare code with test case for Judge0\n  const prepareCodeWithTestCase = (code, testCase) => {\n    // Different preparation based on language\n    switch (selectedLanguage) {\n      case 'javascript':\n        return `${code}\\n\\n// Test case\\nconst result = twoSum(${testCase.input});\\nconsole.log(JSON.stringify(result));`;\n      case 'python':\n        return `${code}\\n\\n# Test case\\nresult = two_sum(${testCase.input})\\nprint(result)`;\n      case 'java':\n        return `${code}\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Solution solution = new Solution();\\n    int[] result = solution.twoSum(${testCase.input});\\n    System.out.println(java.util.Arrays.toString(result));\\n  }\\n}`;\n      case 'cpp':\n        return `${code}\\n\\nint main() {\\n  Solution solution;\\n  auto result = solution.twoSum(${testCase.input});\\n  for (int i = 0; i < result.size(); i++) {\\n    std::cout << result[i];\\n    if (i < result.size() - 1) std::cout << \",\";\\n  }\\n  return 0;\\n}`;\n      case 'csharp':\n        return `${code}\\n\\npublic class Program {\\n  public static void Main() {\\n    Solution solution = new Solution();\\n    int[] result = solution.TwoSum(${testCase.input});\\n    Console.WriteLine(string.Join(\",\", result));\\n  }\\n}`;\n      default:\n        return code;\n    }\n  };\n\n  // Submit code to Judge0 API\n  const submitToJudge0 = async code => {\n    try {\n      // Create submission\n      const createResponse = await axios.post(`${JUDGE0_API_URL}/submissions`, {\n        source_code: code,\n        language_id: languageIds[selectedLanguage],\n        stdin: '',\n        expected_output: ''\n      }, {\n        headers: {\n          'X-RapidAPI-Key': JUDGE0_API_KEY,\n          'X-RapidAPI-Host': 'judge0-ce.p.rapidapi.com',\n          'Content-Type': 'application/json'\n        }\n      });\n      const token = createResponse.data.token;\n\n      // Poll for results\n      let result;\n      let attempts = 0;\n      const maxAttempts = 10;\n      while (attempts < maxAttempts) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        const getResponse = await axios.get(`${JUDGE0_API_URL}/submissions/${token}`, {\n          headers: {\n            'X-RapidAPI-Key': JUDGE0_API_KEY,\n            'X-RapidAPI-Host': 'judge0-ce.p.rapidapi.com'\n          },\n          params: {\n            base64_encoded: 'false',\n            fields: 'stdout,stderr,status_id,compile_output,message,time,memory'\n          }\n        });\n        result = getResponse.data;\n\n        // Check if processing is complete\n        if (result.status.id !== 1 && result.status.id !== 2) {\n          break;\n        }\n        attempts++;\n      }\n      return result;\n    } catch (error) {\n      console.error('Judge0 API error:', error);\n      throw new Error('Failed to compile and run code');\n    }\n  };\n\n  // Update opponent on user's progress\n  const updateProgress = progress => {\n    // Emit progress update to server\n    socketRef.current.emit('update_progress', {\n      progress: progress\n    });\n  };\n\n  // Format time for display\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Add this function to start a demo battle\n  const startDemoMode = () => {\n    console.log(\"Starting Practice Mode...\");\n    setIsDemoMode(true);\n    setShowMatchmakingModal(false);\n\n    // Initialize a demo battle with a sample problem\n    setBattleState(prev => ({\n      ...prev,\n      status: 'active',\n      problem: {\n        id: 1,\n        title: \"Two Sum\",\n        description: \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\\n\\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\\n\\nYou can return the answer in any order.\",\n        difficulty: selectedDifficulty || 'medium',\n        category: selectedCategory || 'algorithms',\n        starterCode: {\n          javascript: \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nfunction twoSum(nums, target) {\\n  // Your code here\\n}\",\n          python: \"def two_sum(nums, target):\\n    # Your code here\\n    pass\",\n          java: \"class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        // Your code here\\n        return new int[]{0, 0};\\n    }\\n}\",\n          cpp: \"#include <vector>\\n\\nclass Solution {\\npublic:\\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\\n        // Your code here\\n        return {0, 0};\\n    }\\n};\",\n          csharp: \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        // Your code here\\n        return new int[]{0, 0};\\n    }\\n}\"\n        }\n      },\n      opponent: {\n        name: \"AI Opponent\",\n        rating: 1800,\n        winRate: \"75%\",\n        preferredLanguage: \"Python\",\n        skillLevel: \"Adaptive\",\n        avatar: \"https://randomuser.me/api/portraits/lego/1.jpg\"\n      },\n      userCode: getDefaultStarterCode(selectedLanguage || 'javascript')\n    }));\n\n    // Set demo test cases\n    setTestCases([{\n      id: 1,\n      input: \"[2, 7, 11, 15], 9\",\n      expectedOutput: \"[0,1]\"\n    }, {\n      id: 2,\n      input: \"[3, 2, 4], 6\",\n      expectedOutput: \"[1,2]\"\n    }, {\n      id: 3,\n      input: \"[3, 3], 6\",\n      expectedOutput: \"[0,1]\"\n    }]);\n\n    // Simulate AI opponent progress updates\n    startAIOpponentSimulation();\n  };\n\n  // Add this function to simulate AI opponent progress\n  const startAIOpponentSimulation = () => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      if (progress < 100) {\n        // Randomly increase progress between 1-5%\n        const increment = Math.floor(Math.random() * 5) + 1;\n        progress = Math.min(progress + increment, 100);\n\n        // Update opponent progress\n        setBattleState(prev => ({\n          ...prev,\n          opponentProgress: progress\n        }));\n\n        // If progress reaches 100%, simulate battle completion after a delay\n        if (progress === 100) {\n          setTimeout(() => {\n            if (isDemoMode) {\n              // Check if user has completed the challenge\n              const userProgress = testResults.filter(r => r.passed).length / testCases.length * 100;\n              if (userProgress === 100) {\n                // User won\n                setBattleState(prev => ({\n                  ...prev,\n                  status: 'completed',\n                  winner: 'user',\n                  aiAnalysis: \"Great job! You solved the problem efficiently.\"\n                }));\n              } else {\n                // AI won\n                setBattleState(prev => ({\n                  ...prev,\n                  status: 'completed',\n                  winner: 'opponent',\n                  aiAnalysis: \"The AI opponent solved the problem faster. Try again!\"\n                }));\n              }\n            }\n          }, 3000);\n        }\n      } else {\n        clearInterval(interval);\n      }\n    }, 2000);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(interval);\n  };\n\n  // Add a dedicated function to render the main menu with clear options\n  const renderMainMenu = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coding-battle-main-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Coding Battle Arena\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"main-subtitle\",\n        children: \"Choose your battle mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-mode-cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mode-card\",\n          onClick: () => setShowMatchmakingModal(true),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-icon\",\n            children: \"\\uD83D\\uDC65\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Competitive Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 734,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Challenge real opponents in a head-to-head coding battle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 735,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"mode-button competitive\",\n            children: \"Find Opponent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mode-card practice-card\",\n          onClick: startDemoMode,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-icon\",\n            children: \"\\uD83C\\uDFCB\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Practice Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Train your skills against an AI opponent at your own pace\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 742,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"mode-button practice\",\n            children: \"Start Practice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 743,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"battle-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-number\",\n            children: \"250+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Coding Challenges\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 750,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-number\",\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 753,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Programming Languages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 754,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-number\",\n            children: \"24/7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 758,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 727,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the matchmaking modal\n  const renderMatchmakingModal = () => {\n    var _battleState$opponent, _battleState$opponent2, _battleState$opponent3, _battleState$opponent4, _battleState$opponent5;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"matchmaking-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"matchmaking-modal\",\n        children: !matchmaking && !matchFound ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Find Your Perfect Opponent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 772,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"modal-subtitle\",\n            children: \"Our AI will match you with an opponent of similar skill level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"matchmaking-options\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"option-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Difficulty Level\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 777,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"option-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: selectedDifficulty === 'easy' ? 'active' : '',\n                  onClick: () => setSelectedDifficulty('easy'),\n                  children: \"Easy\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 779,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: selectedDifficulty === 'medium' ? 'active' : '',\n                  onClick: () => setSelectedDifficulty('medium'),\n                  children: \"Medium\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 785,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: selectedDifficulty === 'hard' ? 'active' : '',\n                  onClick: () => setSelectedDifficulty('hard'),\n                  children: \"Hard\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 791,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 778,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 776,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"option-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Problem Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 801,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"option-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: selectedCategory === 'algorithms' ? 'active' : '',\n                  onClick: () => setSelectedCategory('algorithms'),\n                  children: \"Algorithms\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 803,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: selectedCategory === 'data-structures' ? 'active' : '',\n                  onClick: () => setSelectedCategory('data-structures'),\n                  children: \"Data Structures\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 809,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: selectedCategory === 'dynamic-programming' ? 'active' : '',\n                  onClick: () => setSelectedCategory('dynamic-programming'),\n                  children: \"Dynamic Programming\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 815,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 802,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 800,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"option-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Programming Language\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"option-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: selectedLanguage === 'javascript' ? 'active' : '',\n                  onClick: () => setSelectedLanguage('javascript'),\n                  children: \"JavaScript\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 827,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: selectedLanguage === 'python' ? 'active' : '',\n                  onClick: () => setSelectedLanguage('python'),\n                  children: \"Python\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 833,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: selectedLanguage === 'java' ? 'active' : '',\n                  onClick: () => setSelectedLanguage('java'),\n                  children: \"Java\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 839,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 826,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 824,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 15\n          }, this), matchStartError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-message\",\n            children: matchStartError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 849,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"primary-button\",\n              onClick: startMatchmaking,\n              children: \"Find Match\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 852,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"practice-mode-button\",\n              onClick: startDemoMode,\n              children: \"Practice Mode\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 855,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"cancel-button\",\n              onClick: () => setShowMatchmakingModal(false),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 861,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 851,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : matchFound ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"match-found-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Match Found!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"opponent-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: ((_battleState$opponent = battleState.opponent) === null || _battleState$opponent === void 0 ? void 0 : _battleState$opponent.avatar) || \"https://randomuser.me/api/portraits/men/32.jpg\",\n              alt: \"Opponent\",\n              className: \"opponent-avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 870,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"opponent-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: ((_battleState$opponent2 = battleState.opponent) === null || _battleState$opponent2 === void 0 ? void 0 : _battleState$opponent2.name) || \"Unknown Opponent\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 876,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Rating: \", ((_battleState$opponent3 = battleState.opponent) === null || _battleState$opponent3 === void 0 ? void 0 : _battleState$opponent3.rating) || \"1500\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 877,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Win Rate: \", ((_battleState$opponent4 = battleState.opponent) === null || _battleState$opponent4 === void 0 ? void 0 : _battleState$opponent4.winRate) || \"50%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 878,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Preferred Language: \", ((_battleState$opponent5 = battleState.opponent) === null || _battleState$opponent5 === void 0 ? void 0 : _battleState$opponent5.preferredLanguage) || \"JavaScript\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 879,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Skill Match: \", battleState.skillMatchPercentage || \"85%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 880,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 875,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"primary-button\",\n              onClick: acceptMatch,\n              disabled: isSubmitting,\n              children: isSubmitting ? \"Starting...\" : \"Accept Match\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 884,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"secondary-button\",\n              onClick: declineMatch,\n              disabled: isSubmitting,\n              children: \"Decline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 891,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 883,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"matchmaking-progress\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Finding Your Match\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 902,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 903,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Searching for opponents with similar skill level...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 904,\n            columnNumber: 15\n          }, this), queuePosition && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"queue-position\",\n            children: [\"Position in queue: \", queuePosition, \" of \", usersInQueue]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 906,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"secondary-button\",\n            onClick: () => {\n              socketRef.current.emit('cancel_matchmaking');\n              setMatchmaking(false);\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 910,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 901,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 768,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the main battle UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"coding-battle-container\",\n    children: [battleState.status === 'waiting' && currentView === 'main' ? renderMainMenu() : renderBattleInterface(), showMatchmakingModal && renderMatchmakingModal()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 925,\n    columnNumber: 5\n  }, this);\n}\n_s(CodingBattle, \"cnREXC5Q7I7DT2KjdyHC1TbebAY=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = CodingBattle;\nexport default CodingBattle;\n\n// Helper function to get default starter code based on language\nconst getDefaultStarterCode = language => {\n  const defaultCode = {\n    javascript: \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nfunction twoSum(nums, target) {\\n  // Your code here\\n}\",\n    python: \"def two_sum(nums, target):\\n    # Your code here\\n    pass\",\n    java: \"class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        // Your code here\\n        return new int[]{0, 0};\\n    }\\n}\",\n    cpp: \"#include <vector>\\n\\nclass Solution {\\npublic:\\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\\n        // Your code here\\n        return {0, 0};\\n    }\\n};\",\n    csharp: \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        // Your code here\\n        return new int[]{0, 0};\\n    }\\n}\"\n  };\n  return defaultCode[language] || defaultCode.javascript;\n};\nvar _c;\n$RefreshReg$(_c, \"CodingBattle\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","axios","io","Editor","jsxDEV","_jsxDEV","Fragment","_Fragment","CodingBattle","_s","battleId","navigate","socketRef","editorRef","battleState","setBattleState","status","timeRemaining","problem","opponent","userCode","opponentProgress","userTestResults","winner","battleType","aiAnalysis","skillMatchPercentage","testCases","setTestCases","selectedLanguage","setSelectedLanguage","isSubmitting","setIsSubmitting","showHint","setShowHint","showAiInsights","setShowAiInsights","compilerOutput","setCompilerOutput","activeTab","setActiveTab","runningTest","setRunningTest","testResults","setTestResults","showMatchmakingModal","setShowMatchmakingModal","matchmaking","setMatchmaking","matchFound","setMatchFound","selectedDifficulty","setSelectedDifficulty","selectedCategory","setSelectedCategory","matchStartError","setMatchStartError","queuePosition","setQueuePosition","usersInQueue","setUsersInQueue","isDemoMode","setIsDemoMode","currentView","setCurrentView","JUDGE0_API_URL","JUDGE0_API_KEY","process","env","REACT_APP_JUDGE0_API_KEY","languageIds","javascript","python","java","cpp","csharp","languageExtensions","editorThemes","current","withCredentials","transports","on","console","log","error","data","position","totalUsers","prev","name","username","rating","winRate","preferredLanguage","skillLevel","matchPercentage","avatar","starterCode","replace","progress","results","passedTests","filter","result","passed","length","totalTests","Math","floor","updateProgress","message","alert","disconnect","fetchBattleDetails","handleEditorDidMount","editor","monaco","id","emit","startMatchmaking","difficulty","category","language","acceptMatch","setTimeout","title","description","getDefaultStarterCode","input","expectedOutput","declineMatch","runTestCase","testCaseId","code","getValue","testCase","find","tc","Error","preparedCode","prepareCodeWithTestCase","submitToJudge0","output","stdout","stderr","trim","newResults","existingIndex","findIndex","r","push","compile_output","submitCode","handleDemoModeSubmission","simulateCodeSubmission","random","allPassed","every","createResponse","post","source_code","language_id","stdin","expected_output","headers","token","attempts","maxAttempts","Promise","resolve","getResponse","get","params","base64_encoded","fields","formatTime","seconds","mins","secs","toString","padStart","startDemoMode","startAIOpponentSimulation","interval","setInterval","increment","min","userProgress","clearInterval","renderMainMenu","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","renderMatchmakingModal","_battleState$opponent","_battleState$opponent2","_battleState$opponent3","_battleState$opponent4","_battleState$opponent5","src","alt","disabled","renderBattleInterface","_c","defaultCode","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/AlgoHunt/src/pages/CodingBattle.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './CodingBattle.css';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport Editor from '@monaco-editor/react';\n\nfunction CodingBattle() {\n  const { battleId } = useParams();\n  const navigate = useNavigate();\n  const socketRef = useRef(null);\n  const editorRef = useRef(null);\n  \n  // Battle state\n  const [battleState, setBattleState] = useState({\n    status: 'preparing', // preparing, matchmaking, active, completed\n    timeRemaining: 1800, // 30 minutes in seconds\n    problem: null,\n    opponent: null,\n    userCode: '',\n    opponentProgress: 0,\n    userTestResults: null,\n    winner: null,\n    battleType: '1v1',\n    aiAnalysis: null,\n    skillMatchPercentage: null\n  });\n\n  // UI states\n  const [testCases, setTestCases] = useState([]);\n  const [selectedLanguage, setSelectedLanguage] = useState('javascript');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showHint, setShowHint] = useState(false);\n  const [showAiInsights, setShowAiInsights] = useState(false);\n  const [compilerOutput, setCompilerOutput] = useState(null);\n  const [activeTab, setActiveTab] = useState('problem'); // problem, submissions, leaderboard\n  const [runningTest, setRunningTest] = useState(false);\n  const [testResults, setTestResults] = useState([]);\n  \n  // Matchmaking states\n  const [showMatchmakingModal, setShowMatchmakingModal] = useState(true);\n  const [matchmaking, setMatchmaking] = useState(false);\n  const [matchFound, setMatchFound] = useState(false);\n  const [selectedDifficulty, setSelectedDifficulty] = useState('medium');\n  const [selectedCategory, setSelectedCategory] = useState('algorithms');\n  const [matchStartError, setMatchStartError] = useState(null);\n  const [queuePosition, setQueuePosition] = useState(null);\n  const [usersInQueue, setUsersInQueue] = useState(0);\n\n  // Add to the state declarations at the top\n  const [isDemoMode, setIsDemoMode] = useState(false);\n\n  // Add state to track the current view\n  const [currentView, setCurrentView] = useState('main'); // 'main', 'matchmaking', 'practice', 'battle'\n\n  // Judge0 API configuration\n  const JUDGE0_API_URL = 'https://judge0-ce.p.rapidapi.com';\n  const JUDGE0_API_KEY = process.env.REACT_APP_JUDGE0_API_KEY || 'your-rapidapi-key';\n\n  // Judge0 language IDs\n  const languageIds = {\n    javascript: 63,  // Node.js\n    python: 71,      // Python 3\n    java: 62,        // Java\n    cpp: 54,         // C++\n    csharp: 51       // C#\n  };\n\n  // Language file extensions\n  const languageExtensions = {\n    javascript: 'js',\n    python: 'py',\n    java: 'java',\n    cpp: 'cpp',\n    csharp: 'cs'\n  };\n\n  // Editor themes by language\n  const editorThemes = {\n    javascript: 'vs-dark',\n    python: 'vs-dark',\n    java: 'vs-dark',\n    cpp: 'vs-dark',\n    csharp: 'vs-dark'\n  };\n\n  // Initialize socket connection\n  useEffect(() => {\n    // Connect to the Socket.io server\n    socketRef.current = io('http://localhost:5000', {\n      withCredentials: true,\n      transports: ['websocket']\n    });\n\n    // Socket event listeners\n    socketRef.current.on('connect', () => {\n      console.log('Connected to matchmaking server');\n    });\n\n    socketRef.current.on('connect_error', (error) => {\n      console.error('Socket connection error:', error);\n      setMatchStartError('Failed to connect to matchmaking server. Please try again.');\n    });\n\n    socketRef.current.on('queue_position', (data) => {\n      setQueuePosition(data.position);\n      setUsersInQueue(data.totalUsers);\n    });\n\n    socketRef.current.on('match_found', (data) => {\n      setMatchmaking(false);\n      setMatchFound(true);\n      \n      // Set opponent data received from server\n      setBattleState(prev => ({\n        ...prev,\n        opponent: {\n          name: data.opponent.username,\n          rating: data.opponent.rating,\n          winRate: data.opponent.winRate,\n          preferredLanguage: data.opponent.preferredLanguage,\n          skillLevel: `${data.matchPercentage}% match for your skill level`,\n          avatar: data.opponent.avatar || \"https://randomuser.me/api/portraits/men/32.jpg\"\n        },\n        skillMatchPercentage: `${data.matchPercentage}%`\n      }));\n    });\n\n    socketRef.current.on('battle_started', (data) => {\n      setShowMatchmakingModal(false);\n      \n      // Set battle data received from server\n      setBattleState(prev => ({\n        ...prev,\n        status: 'active',\n        problem: data.problem,\n        userCode: data.problem.starterCode[selectedLanguage] || ''\n      }));\n      \n      // Set test cases\n      setTestCases(data.testCases);\n      \n      // Navigate to the battle room if needed\n      if (data.battleId && !battleId) {\n        navigate(`/battle/${data.battleId}`, { replace: true });\n      }\n    });\n\n    socketRef.current.on('opponent_progress', (data) => {\n      setBattleState(prev => ({\n        ...prev,\n        opponentProgress: data.progress\n      }));\n    });\n\n    socketRef.current.on('submission_results', (data) => {\n      setIsSubmitting(false);\n      setTestResults(data.results);\n      \n      // Calculate progress based on passed test cases\n      const passedTests = data.results.filter(result => result.passed).length;\n      const totalTests = data.results.length;\n      const progress = Math.floor((passedTests / totalTests) * 100);\n      \n      // Update progress\n      updateProgress(progress);\n      \n      // Check if all tests passed\n      if (data.passed) {\n        // Show success message\n        setCompilerOutput({\n          status: 'success',\n          message: 'All test cases passed! You completed the challenge.'\n        });\n      } else {\n        // Show failure message\n        setCompilerOutput({\n          status: 'error',\n          message: 'Some test cases failed. Keep trying!'\n        });\n      }\n    });\n\n    socketRef.current.on('battle_completed', (data) => {\n      setBattleState(prev => ({\n        ...prev,\n        status: 'completed',\n        winner: data.winner,\n        aiAnalysis: data.aiAnalysis\n      }));\n    });\n\n    socketRef.current.on('opponent_disconnected', () => {\n      // Handle opponent disconnection\n      alert('Your opponent has disconnected. You win by default!');\n      setBattleState(prev => ({\n        ...prev,\n        status: 'completed',\n        winner: 'user'\n      }));\n    });\n\n    // Clean up on component unmount\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n      }\n    };\n  }, [battleId, navigate, selectedLanguage]);\n\n  // Initialize battle when component mounts\n  useEffect(() => {\n    // If battleId is provided, fetch battle details\n    if (battleId) {\n      fetchBattleDetails(battleId);\n    }\n  }, [battleId]);\n\n  // Update editor content when language changes\n  useEffect(() => {\n    if (battleState.problem && battleState.problem.starterCode) {\n      setBattleState(prev => ({\n        ...prev,\n        userCode: battleState.problem.starterCode[selectedLanguage] || ''\n      }));\n    }\n  }, [selectedLanguage, battleState.problem]);\n\n  // Handle editor mount\n  function handleEditorDidMount(editor, monaco) {\n    editorRef.current = editor;\n  }\n\n  // Fetch battle details if joining an existing battle\n  const fetchBattleDetails = async (id) => {\n    try {\n      // Join the battle room\n      socketRef.current.emit('join_battle', { battleId: id });\n      \n      // The server will respond with battle_started event\n      // which is handled in the socket event listeners\n    } catch (error) {\n      console.error(\"Error fetching battle details:\", error);\n      setMatchStartError(\"Failed to load battle details. Please try again.\");\n    }\n  };\n\n  // Start matchmaking process\n  const startMatchmaking = () => {\n    setMatchmaking(true);\n    setMatchStartError(null);\n    \n    // Emit matchmaking request to server\n    socketRef.current.emit('find_match', {\n      difficulty: selectedDifficulty,\n      category: selectedCategory,\n      language: selectedLanguage\n    });\n  };\n\n  // Accept the matched opponent and start the battle\n  const acceptMatch = () => {\n    setIsSubmitting(true);\n    setMatchStartError(null);\n    \n    // Emit match acceptance to server\n    socketRef.current.emit('accept_match');\n    \n    // Set a timeout to handle potential server response delays\n    setTimeout(() => {\n      if (showMatchmakingModal) {\n        console.log(\"Server didn't respond to match acceptance, forcing battle start\");\n        setShowMatchmakingModal(false);\n        \n        // Initialize a default battle if the server doesn't respond\n        if (!battleState.problem) {\n          setBattleState(prev => ({\n            ...prev,\n            status: 'active',\n            problem: {\n              id: 1,\n              title: \"Two Sum\",\n              description: \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\",\n              difficulty: selectedDifficulty,\n              category: selectedCategory,\n              starterCode: {\n                javascript: \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nfunction twoSum(nums, target) {\\n  // Your code here\\n}\",\n                python: \"def two_sum(nums, target):\\n    # Your code here\\n    pass\",\n                java: \"class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        // Your code here\\n        return new int[]{0, 0};\\n    }\\n}\",\n                cpp: \"#include <vector>\\n\\nclass Solution {\\npublic:\\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\\n        // Your code here\\n        return {0, 0};\\n    }\\n};\",\n                csharp: \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        // Your code here\\n        return new int[]{0, 0};\\n    }\\n}\"\n              }\n            },\n            userCode: prev.userCode || getDefaultStarterCode(selectedLanguage)\n          }));\n          \n          // Set default test cases\n          setTestCases([\n            {\n              id: 1,\n              input: \"[2, 7, 11, 15], 9\",\n              expectedOutput: \"[0,1]\"\n            },\n            {\n              id: 2,\n              input: \"[3, 2, 4], 6\",\n              expectedOutput: \"[1,2]\"\n            },\n            {\n              id: 3,\n              input: \"[3, 3], 6\",\n              expectedOutput: \"[0,1]\"\n            }\n          ]);\n        }\n      }\n      setIsSubmitting(false);\n    }, 3000);\n  };\n\n  // Decline the match and return to matchmaking\n  const declineMatch = () => {\n    // Emit match decline to server\n    socketRef.current.emit('decline_match');\n    \n    setMatchFound(false);\n    setMatchmaking(false);\n    setMatchStartError(null);\n  };\n\n  // Run code against a single test case\n  const runTestCase = async (testCaseId) => {\n    if (!editorRef.current) return;\n    \n    setRunningTest(true);\n    setCompilerOutput(null);\n    \n    try {\n      const code = editorRef.current.getValue();\n      const testCase = testCases.find(tc => tc.id === testCaseId);\n      \n      if (!testCase) {\n        throw new Error('Test case not found');\n      }\n      \n      // Prepare code with test case\n      const preparedCode = prepareCodeWithTestCase(code, testCase);\n      \n      // Submit to Judge0\n      const result = await submitToJudge0(preparedCode);\n      \n      // Process result\n      if (result.status.id <= 3) { // Accepted, Wrong Answer, Time Limit Exceeded\n        const output = result.stdout || result.stderr || 'No output';\n        const expectedOutput = testCase.expectedOutput;\n        const passed = output.trim() === expectedOutput.trim();\n        \n        setTestResults(prev => {\n          const newResults = [...prev];\n          const existingIndex = newResults.findIndex(r => r.testCaseId === testCaseId);\n          \n          if (existingIndex >= 0) {\n            newResults[existingIndex] = { testCaseId, passed, output };\n          } else {\n            newResults.push({ testCaseId, passed, output });\n          }\n          \n          return newResults;\n        });\n        \n        setCompilerOutput({\n          status: passed ? 'success' : 'error',\n          message: passed ? 'Test passed!' : 'Test failed',\n          output,\n          expectedOutput\n        });\n      } else {\n        // Compilation error or other error\n        setCompilerOutput({\n          status: 'error',\n          message: result.status.description,\n          output: result.stderr || result.compile_output || 'No error details available'\n        });\n      }\n    } catch (error) {\n      console.error('Error running test case:', error);\n      setCompilerOutput({\n        status: 'error',\n        message: 'Failed to run test case',\n        output: error.message\n      });\n    } finally {\n      setRunningTest(false);\n    }\n  };\n\n  // Submit code for testing all test cases\n  const submitCode = async () => {\n    if (!editorRef.current) return;\n    \n    setIsSubmitting(true);\n    setCompilerOutput(null);\n    \n    try {\n      const code = editorRef.current.getValue();\n      \n      // Update user code in state\n      setBattleState(prev => ({\n        ...prev,\n        userCode: code\n      }));\n      \n      if (isDemoMode) {\n        // In demo mode, handle code evaluation locally\n        handleDemoModeSubmission(code);\n      } else {\n        // In real mode, emit to server\n        socketRef.current.emit('submit_code', {\n          code,\n          language: selectedLanguage\n        });\n        \n        // For demo purposes, simulate if no API key\n        if (!process.env.REACT_APP_JUDGE0_API_KEY) {\n          simulateCodeSubmission(code);\n        }\n      }\n    } catch (error) {\n      console.error('Error submitting code:', error);\n      setIsSubmitting(false);\n      setCompilerOutput({\n        status: 'error',\n        message: 'Failed to submit code',\n        output: error.message\n      });\n    }\n  };\n\n  // Add this function to handle demo mode submissions\n  const handleDemoModeSubmission = async (code) => {\n    // Simulate processing delay\n    setTimeout(async () => {\n      try {\n        // Run code against all test cases\n        const results = [];\n        \n        for (const testCase of testCases) {\n          // Prepare code with test case\n          const preparedCode = prepareCodeWithTestCase(code, testCase);\n          \n          // If Judge0 API key is available, use it\n          let result;\n          if (process.env.REACT_APP_JUDGE0_API_KEY) {\n            result = await submitToJudge0(preparedCode);\n            \n            const output = result.stdout || result.stderr || 'No output';\n            const passed = output.trim() === testCase.expectedOutput.trim();\n            \n            results.push({\n              testCaseId: testCase.id,\n              passed,\n              output\n            });\n          } else {\n            // Otherwise simulate the result\n            // In a real app, you'd use a local code runner or sandbox\n            const passed = Math.random() > 0.3; // 70% chance of passing\n            results.push({\n              testCaseId: testCase.id,\n              passed,\n              output: passed ? testCase.expectedOutput : 'Incorrect output'\n            });\n          }\n        }\n        \n        // Calculate if all tests passed\n        const allPassed = results.every(result => result.passed);\n        \n        // Calculate progress\n        const passedTests = results.filter(result => result.passed).length;\n        const progress = Math.floor((passedTests / testCases.length) * 100);\n        \n        // Set test results\n        setTestResults(results);\n        \n        // Set compiler output\n        setCompilerOutput({\n          status: allPassed ? 'success' : 'error',\n          message: allPassed ? 'All test cases passed!' : 'Some test cases failed'\n        });\n        \n        // If all tests passed in demo mode, check if user won\n        if (allPassed && isDemoMode) {\n          const opponentProgress = battleState.opponentProgress;\n          \n          if (opponentProgress < 100) {\n            // User completed before AI\n            setTimeout(() => {\n              setBattleState(prev => ({\n                ...prev,\n                status: 'completed',\n                winner: 'user',\n                aiAnalysis: \"Congratulations! You solved the problem before the AI opponent.\"\n              }));\n            }, 1000);\n          }\n        }\n      } catch (error) {\n        console.error('Error in demo mode submission:', error);\n        setCompilerOutput({\n          status: 'error',\n          message: 'Error evaluating code',\n          output: error.message\n        });\n      } finally {\n        setIsSubmitting(false);\n      }\n    }, 1500);\n  };\n\n  // Prepare code with test case for Judge0\n  const prepareCodeWithTestCase = (code, testCase) => {\n    // Different preparation based on language\n    switch (selectedLanguage) {\n      case 'javascript':\n        return `${code}\\n\\n// Test case\\nconst result = twoSum(${testCase.input});\\nconsole.log(JSON.stringify(result));`;\n      \n      case 'python':\n        return `${code}\\n\\n# Test case\\nresult = two_sum(${testCase.input})\\nprint(result)`;\n      \n      case 'java':\n        return `${code}\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Solution solution = new Solution();\\n    int[] result = solution.twoSum(${testCase.input});\\n    System.out.println(java.util.Arrays.toString(result));\\n  }\\n}`;\n      \n      case 'cpp':\n        return `${code}\\n\\nint main() {\\n  Solution solution;\\n  auto result = solution.twoSum(${testCase.input});\\n  for (int i = 0; i < result.size(); i++) {\\n    std::cout << result[i];\\n    if (i < result.size() - 1) std::cout << \",\";\\n  }\\n  return 0;\\n}`;\n      \n      case 'csharp':\n        return `${code}\\n\\npublic class Program {\\n  public static void Main() {\\n    Solution solution = new Solution();\\n    int[] result = solution.TwoSum(${testCase.input});\\n    Console.WriteLine(string.Join(\",\", result));\\n  }\\n}`;\n      \n      default:\n        return code;\n    }\n  };\n\n  // Submit code to Judge0 API\n  const submitToJudge0 = async (code) => {\n    try {\n      // Create submission\n      const createResponse = await axios.post(`${JUDGE0_API_URL}/submissions`, {\n        source_code: code,\n        language_id: languageIds[selectedLanguage],\n        stdin: '',\n        expected_output: ''\n      }, {\n        headers: {\n          'X-RapidAPI-Key': JUDGE0_API_KEY,\n          'X-RapidAPI-Host': 'judge0-ce.p.rapidapi.com',\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      const token = createResponse.data.token;\n      \n      // Poll for results\n      let result;\n      let attempts = 0;\n      const maxAttempts = 10;\n      \n      while (attempts < maxAttempts) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        const getResponse = await axios.get(`${JUDGE0_API_URL}/submissions/${token}`, {\n          headers: {\n            'X-RapidAPI-Key': JUDGE0_API_KEY,\n            'X-RapidAPI-Host': 'judge0-ce.p.rapidapi.com'\n          },\n          params: {\n            base64_encoded: 'false',\n            fields: 'stdout,stderr,status_id,compile_output,message,time,memory'\n          }\n        });\n        \n        result = getResponse.data;\n        \n        // Check if processing is complete\n        if (result.status.id !== 1 && result.status.id !== 2) {\n          break;\n        }\n        \n        attempts++;\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('Judge0 API error:', error);\n      throw new Error('Failed to compile and run code');\n    }\n  };\n\n  // Update opponent on user's progress\n  const updateProgress = (progress) => {\n    // Emit progress update to server\n    socketRef.current.emit('update_progress', {\n      progress: progress\n    });\n  };\n\n  // Format time for display\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Add this function to start a demo battle\n  const startDemoMode = () => {\n    console.log(\"Starting Practice Mode...\");\n    setIsDemoMode(true);\n    setShowMatchmakingModal(false);\n    \n    // Initialize a demo battle with a sample problem\n    setBattleState(prev => ({\n      ...prev,\n      status: 'active',\n      problem: {\n        id: 1,\n        title: \"Two Sum\",\n        description: \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\\n\\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\\n\\nYou can return the answer in any order.\",\n        difficulty: selectedDifficulty || 'medium',\n        category: selectedCategory || 'algorithms',\n        starterCode: {\n          javascript: \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nfunction twoSum(nums, target) {\\n  // Your code here\\n}\",\n          python: \"def two_sum(nums, target):\\n    # Your code here\\n    pass\",\n          java: \"class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        // Your code here\\n        return new int[]{0, 0};\\n    }\\n}\",\n          cpp: \"#include <vector>\\n\\nclass Solution {\\npublic:\\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\\n        // Your code here\\n        return {0, 0};\\n    }\\n};\",\n          csharp: \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        // Your code here\\n        return new int[]{0, 0};\\n    }\\n}\"\n        }\n      },\n      opponent: {\n        name: \"AI Opponent\",\n        rating: 1800,\n        winRate: \"75%\",\n        preferredLanguage: \"Python\",\n        skillLevel: \"Adaptive\",\n        avatar: \"https://randomuser.me/api/portraits/lego/1.jpg\"\n      },\n      userCode: getDefaultStarterCode(selectedLanguage || 'javascript')\n    }));\n    \n    // Set demo test cases\n    setTestCases([\n      {\n        id: 1,\n        input: \"[2, 7, 11, 15], 9\",\n        expectedOutput: \"[0,1]\"\n      },\n      {\n        id: 2,\n        input: \"[3, 2, 4], 6\",\n        expectedOutput: \"[1,2]\"\n      },\n      {\n        id: 3,\n        input: \"[3, 3], 6\",\n        expectedOutput: \"[0,1]\"\n      }\n    ]);\n    \n    // Simulate AI opponent progress updates\n    startAIOpponentSimulation();\n  };\n\n  // Add this function to simulate AI opponent progress\n  const startAIOpponentSimulation = () => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      if (progress < 100) {\n        // Randomly increase progress between 1-5%\n        const increment = Math.floor(Math.random() * 5) + 1;\n        progress = Math.min(progress + increment, 100);\n        \n        // Update opponent progress\n        setBattleState(prev => ({\n          ...prev,\n          opponentProgress: progress\n        }));\n        \n        // If progress reaches 100%, simulate battle completion after a delay\n        if (progress === 100) {\n          setTimeout(() => {\n            if (isDemoMode) {\n              // Check if user has completed the challenge\n              const userProgress = testResults.filter(r => r.passed).length / testCases.length * 100;\n              \n              if (userProgress === 100) {\n                // User won\n                setBattleState(prev => ({\n                  ...prev,\n                  status: 'completed',\n                  winner: 'user',\n                  aiAnalysis: \"Great job! You solved the problem efficiently.\"\n                }));\n              } else {\n                // AI won\n                setBattleState(prev => ({\n                  ...prev,\n                  status: 'completed',\n                  winner: 'opponent',\n                  aiAnalysis: \"The AI opponent solved the problem faster. Try again!\"\n                }));\n              }\n            }\n          }, 3000);\n        }\n      } else {\n        clearInterval(interval);\n      }\n    }, 2000);\n    \n    // Clean up interval on component unmount\n    return () => clearInterval(interval);\n  };\n\n  // Add a dedicated function to render the main menu with clear options\n  const renderMainMenu = () => {\n    return (\n      <div className=\"coding-battle-main-menu\">\n        <h1>Coding Battle Arena</h1>\n        <p className=\"main-subtitle\">Choose your battle mode</p>\n        \n        <div className=\"battle-mode-cards\">\n          <div className=\"mode-card\" onClick={() => setShowMatchmakingModal(true)}>\n            <div className=\"mode-icon\">👥</div>\n            <h2>Competitive Mode</h2>\n            <p>Challenge real opponents in a head-to-head coding battle</p>\n            <button className=\"mode-button competitive\">Find Opponent</button>\n          </div>\n          \n          <div className=\"mode-card practice-card\" onClick={startDemoMode}>\n            <div className=\"mode-icon\">🏋️</div>\n            <h2>Practice Mode</h2>\n            <p>Train your skills against an AI opponent at your own pace</p>\n            <button className=\"mode-button practice\">Start Practice</button>\n          </div>\n        </div>\n        \n        <div className=\"battle-stats\">\n          <div className=\"stat\">\n            <span className=\"stat-number\">250+</span>\n            <span className=\"stat-label\">Coding Challenges</span>\n          </div>\n          <div className=\"stat\">\n            <span className=\"stat-number\">5</span>\n            <span className=\"stat-label\">Programming Languages</span>\n          </div>\n          <div className=\"stat\">\n            <span className=\"stat-number\">24/7</span>\n            <span className=\"stat-label\">Available</span>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Render the matchmaking modal\n  const renderMatchmakingModal = () => {\n    return (\n      <div className=\"matchmaking-modal-overlay\">\n        <div className=\"matchmaking-modal\">\n          {!matchmaking && !matchFound ? (\n            <>\n              <h2>Find Your Perfect Opponent</h2>\n              <p className=\"modal-subtitle\">Our AI will match you with an opponent of similar skill level</p>\n              \n              <div className=\"matchmaking-options\">\n                <div className=\"option-group\">\n                  <label>Difficulty Level</label>\n                  <div className=\"option-buttons\">\n                    <button \n                      className={selectedDifficulty === 'easy' ? 'active' : ''} \n                      onClick={() => setSelectedDifficulty('easy')}\n                    >\n                      Easy\n                    </button>\n                    <button \n                      className={selectedDifficulty === 'medium' ? 'active' : ''} \n                      onClick={() => setSelectedDifficulty('medium')}\n                    >\n                      Medium\n                    </button>\n                    <button \n                      className={selectedDifficulty === 'hard' ? 'active' : ''} \n                      onClick={() => setSelectedDifficulty('hard')}\n                    >\n                      Hard\n                    </button>\n                  </div>\n                </div>\n                \n                <div className=\"option-group\">\n                  <label>Problem Category</label>\n                  <div className=\"option-buttons\">\n                    <button \n                      className={selectedCategory === 'algorithms' ? 'active' : ''} \n                      onClick={() => setSelectedCategory('algorithms')}\n                    >\n                      Algorithms\n                    </button>\n                    <button \n                      className={selectedCategory === 'data-structures' ? 'active' : ''} \n                      onClick={() => setSelectedCategory('data-structures')}\n                    >\n                      Data Structures\n                    </button>\n                    <button \n                      className={selectedCategory === 'dynamic-programming' ? 'active' : ''} \n                      onClick={() => setSelectedCategory('dynamic-programming')}\n                    >\n                      Dynamic Programming\n                    </button>\n                  </div>\n                </div>\n                \n                <div className=\"option-group\">\n                  <label>Programming Language</label>\n                  <div className=\"option-buttons\">\n                    <button \n                      className={selectedLanguage === 'javascript' ? 'active' : ''} \n                      onClick={() => setSelectedLanguage('javascript')}\n                    >\n                      JavaScript\n                    </button>\n                    <button \n                      className={selectedLanguage === 'python' ? 'active' : ''} \n                      onClick={() => setSelectedLanguage('python')}\n                    >\n                      Python\n                    </button>\n                    <button \n                      className={selectedLanguage === 'java' ? 'active' : ''} \n                      onClick={() => setSelectedLanguage('java')}\n                    >\n                      Java\n                    </button>\n                  </div>\n                </div>\n              </div>\n              \n              {matchStartError && <p className=\"error-message\">{matchStartError}</p>}\n              \n              <div className=\"modal-actions\">\n                <button className=\"primary-button\" onClick={startMatchmaking}>\n                  Find Match\n                </button>\n                <button \n                  className=\"practice-mode-button\" \n                  onClick={startDemoMode}\n                >\n                  Practice Mode\n                </button>\n                <button className=\"cancel-button\" onClick={() => setShowMatchmakingModal(false)}>\n                  Cancel\n                </button>\n              </div>\n            </>\n          ) : matchFound ? (\n            <div className=\"match-found-container\">\n              <h2>Match Found!</h2>\n              <div className=\"opponent-info\">\n                <img \n                  src={battleState.opponent?.avatar || \"https://randomuser.me/api/portraits/men/32.jpg\"} \n                  alt=\"Opponent\" \n                  className=\"opponent-avatar\" \n                />\n                <div className=\"opponent-details\">\n                  <h3>{battleState.opponent?.name || \"Unknown Opponent\"}</h3>\n                  <p>Rating: {battleState.opponent?.rating || \"1500\"}</p>\n                  <p>Win Rate: {battleState.opponent?.winRate || \"50%\"}</p>\n                  <p>Preferred Language: {battleState.opponent?.preferredLanguage || \"JavaScript\"}</p>\n                  <p>Skill Match: {battleState.skillMatchPercentage || \"85%\"}</p>\n                </div>\n              </div>\n              <div className=\"modal-actions\">\n                <button \n                  className=\"primary-button\" \n                  onClick={acceptMatch}\n                  disabled={isSubmitting}\n                >\n                  {isSubmitting ? \"Starting...\" : \"Accept Match\"}\n                </button>\n                <button \n                  className=\"secondary-button\" \n                  onClick={declineMatch}\n                  disabled={isSubmitting}\n                >\n                  Decline\n                </button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"matchmaking-progress\">\n              <h2>Finding Your Match</h2>\n              <div className=\"loading-spinner\"></div>\n              <p>Searching for opponents with similar skill level...</p>\n              {queuePosition && (\n                <p className=\"queue-position\">\n                  Position in queue: {queuePosition} of {usersInQueue}\n                </p>\n              )}\n              <button className=\"secondary-button\" onClick={() => {\n                socketRef.current.emit('cancel_matchmaking');\n                setMatchmaking(false);\n              }}>\n                Cancel\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  // Render the main battle UI\n  return (\n    <div className=\"coding-battle-container\">\n      {battleState.status === 'waiting' && currentView === 'main' ? (\n        renderMainMenu()\n      ) : (\n        renderBattleInterface()\n      )}\n      \n      {showMatchmakingModal && renderMatchmakingModal()}\n    </div>\n  );\n}\n\nexport default CodingBattle;\n\n// Helper function to get default starter code based on language\nconst getDefaultStarterCode = (language) => {\n  const defaultCode = {\n    javascript: \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nfunction twoSum(nums, target) {\\n  // Your code here\\n}\",\n    python: \"def two_sum(nums, target):\\n    # Your code here\\n    pass\",\n    java: \"class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        // Your code here\\n        return new int[]{0, 0};\\n    }\\n}\",\n    cpp: \"#include <vector>\\n\\nclass Solution {\\npublic:\\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\\n        // Your code here\\n        return {0, 0};\\n    }\\n};\",\n    csharp: \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        // Your code here\\n        return new int[]{0, 0};\\n    }\\n}\"\n  };\n  \n  return defaultCode[language] || defaultCode.javascript;\n};\n\n\n\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/**\n * Anti-Cheating Service for Coding Battles\n * \n * This service provides functionality to detect and prevent cheating in coding battles.\n * It monitors various user activities and behaviors that might indicate cheating attempts.\n */\n\nclass AntiCheatingService {\n  constructor() {\n    this.isMonitoring = false;\n    this.logs = [];\n    this.suspiciousActivities = [];\n    this.battleId = null;\n    this.userId = null;\n    this.startTime = null;\n    this.monitoringIntervalId = null;\n    this.clipboardMonitorEnabled = false;\n    this.tabSwitchMonitorEnabled = false;\n    this.codeAnalysisEnabled = false;\n    this.typingPatternMonitorEnabled = false;\n    this.screenshotIntervalId = null;\n    this.screenshotInterval = 30000; // 30 seconds\n    this.typingMetrics = {\n      keystrokes: [],\n      pauses: [],\n      bursts: [],\n      averageSpeed: 0\n    };\n    this.codeSnapshots = [];\n    this.lastActiveTime = Date.now();\n    this.inactivityThreshold = 60000; // 1 minute\n    this.tabSwitchCount = 0;\n    this.clipboardPasteCount = 0;\n    this.suspiciousThreshold = {\n      tabSwitches: 10,\n      clipboardPastes: 5,\n      inactivityPeriods: 3,\n      codeChanges: 0.8 // 80% similarity threshold\n    };\n  }\n\n  /**\n   * Start monitoring for cheating behaviors\n   * @param {string} battleId - The ID of the battle\n   * @param {string} userId - The ID of the user\n   * @param {Object} options - Configuration options for monitoring\n   */\n  startMonitoring(battleId, userId, options = {}) {\n    if (this.isMonitoring) {\n      this.stopMonitoring();\n    }\n    this.battleId = battleId;\n    this.userId = userId;\n    this.startTime = Date.now();\n    this.isMonitoring = true;\n    this.logs = [];\n    this.suspiciousActivities = [];\n    this.tabSwitchCount = 0;\n    this.clipboardPasteCount = 0;\n    this.codeSnapshots = [];\n    this.typingMetrics = {\n      keystrokes: [],\n      pauses: [],\n      bursts: [],\n      averageSpeed: 0\n    };\n\n    // Configure monitoring options\n    this.clipboardMonitorEnabled = options.clipboardMonitor !== false;\n    this.tabSwitchMonitorEnabled = options.tabSwitchMonitor !== false;\n    this.codeAnalysisEnabled = options.codeAnalysis !== false;\n    this.typingPatternMonitorEnabled = options.typingPatternMonitor !== false;\n    this.log('Anti-cheating monitoring started');\n\n    // Set up event listeners\n    if (this.clipboardMonitorEnabled) {\n      this.setupClipboardMonitoring();\n    }\n    if (this.tabSwitchMonitorEnabled) {\n      this.setupTabSwitchMonitoring();\n    }\n    if (this.typingPatternMonitorEnabled) {\n      this.setupTypingPatternMonitoring();\n    }\n\n    // Set up periodic monitoring\n    this.monitoringIntervalId = setInterval(() => {\n      this.checkInactivity();\n    }, 10000); // Check every 10 seconds\n\n    // Take periodic screenshots if enabled\n    if (options.screenshots) {\n      this.setupScreenshotCapture();\n    }\n    return true;\n  }\n\n  /**\n   * Stop all monitoring activities\n   */\n  stopMonitoring() {\n    if (!this.isMonitoring) return;\n\n    // Clear intervals\n    if (this.monitoringIntervalId) {\n      clearInterval(this.monitoringIntervalId);\n      this.monitoringIntervalId = null;\n    }\n    if (this.screenshotIntervalId) {\n      clearInterval(this.screenshotIntervalId);\n      this.screenshotIntervalId = null;\n    }\n\n    // Remove event listeners\n    this.removeClipboardMonitoring();\n    this.removeTabSwitchMonitoring();\n    this.removeTypingPatternMonitoring();\n    this.log('Anti-cheating monitoring stopped');\n    this.isMonitoring = false;\n    return {\n      battleId: this.battleId,\n      userId: this.userId,\n      duration: Date.now() - this.startTime,\n      logs: this.logs,\n      suspiciousActivities: this.suspiciousActivities,\n      metrics: {\n        tabSwitches: this.tabSwitchCount,\n        clipboardPastes: this.clipboardPasteCount,\n        typingMetrics: this.typingMetrics,\n        codeSnapshots: this.codeSnapshots.length\n      }\n    };\n  }\n\n  /**\n   * Take a snapshot of the current code\n   * @param {string} code - The current code in the editor\n   */\n  takeCodeSnapshot(code) {\n    if (!this.isMonitoring || !this.codeAnalysisEnabled) return;\n    this.codeSnapshots.push({\n      timestamp: Date.now(),\n      code\n    });\n\n    // Analyze for suspicious code changes if we have multiple snapshots\n    if (this.codeSnapshots.length > 1) {\n      this.analyzeCodeChanges();\n    }\n  }\n\n  /**\n   * Record a keystroke for typing pattern analysis\n   * @param {KeyboardEvent} event - The keyboard event\n   */\n  recordKeystroke(event) {\n    if (!this.isMonitoring || !this.typingPatternMonitorEnabled) return;\n    const now = Date.now();\n    this.lastActiveTime = now;\n    this.typingMetrics.keystrokes.push({\n      key: event.key,\n      timestamp: now,\n      modifiers: {\n        ctrl: event.ctrlKey,\n        alt: event.altKey,\n        shift: event.shiftKey,\n        meta: event.metaKey\n      }\n    });\n\n    // Calculate typing speed and patterns periodically\n    if (this.typingMetrics.keystrokes.length % 50 === 0) {\n      this.analyzeTypingPatterns();\n    }\n  }\n\n  /**\n   * Setup clipboard monitoring\n   */\n  setupClipboardMonitoring() {\n    document.addEventListener('paste', this.handlePaste.bind(this));\n    document.addEventListener('copy', this.handleCopy.bind(this));\n    document.addEventListener('cut', this.handleCut.bind(this));\n  }\n\n  /**\n   * Remove clipboard monitoring\n   */\n  removeClipboardMonitoring() {\n    document.removeEventListener('paste', this.handlePaste.bind(this));\n    document.removeEventListener('copy', this.handleCopy.bind(this));\n    document.removeEventListener('cut', this.handleCut.bind(this));\n  }\n\n  /**\n   * Setup tab switch monitoring\n   */\n  setupTabSwitchMonitoring() {\n    window.addEventListener('blur', this.handleTabSwitch.bind(this));\n    window.addEventListener('focus', this.handleTabFocus.bind(this));\n    document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n  }\n\n  /**\n   * Remove tab switch monitoring\n   */\n  removeTabSwitchMonitoring() {\n    window.removeEventListener('blur', this.handleTabSwitch.bind(this));\n    window.removeEventListener('focus', this.handleTabFocus.bind(this));\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n  }\n\n  /**\n   * Setup typing pattern monitoring\n   */\n  setupTypingPatternMonitoring() {\n    document.addEventListener('keydown', this.recordKeystroke.bind(this));\n  }\n\n  /**\n   * Remove typing pattern monitoring\n   */\n  removeTypingPatternMonitoring() {\n    document.removeEventListener('keydown', this.recordKeystroke.bind(this));\n  }\n\n  /**\n   * Setup periodic screenshot capture\n   */\n  setupScreenshotCapture() {\n    // In a real implementation, this would capture the screen\n    // For this demo, we'll just log that a screenshot would be taken\n    this.screenshotIntervalId = setInterval(() => {\n      this.log('Screenshot captured');\n    }, this.screenshotInterval);\n  }\n\n  /**\n   * Handle paste events\n   * @param {ClipboardEvent} event - The clipboard event\n   */\n  handlePaste(event) {\n    this.clipboardPasteCount++;\n    this.lastActiveTime = Date.now();\n    this.log(`Clipboard paste detected (${this.clipboardPasteCount} total)`);\n    if (this.clipboardPasteCount >= this.suspiciousThreshold.clipboardPastes) {\n      this.flagSuspiciousActivity('Excessive clipboard usage', {\n        count: this.clipboardPasteCount,\n        threshold: this.suspiciousThreshold.clipboardPastes\n      });\n    }\n  }\n\n  /**\n   * Handle copy events\n   * @param {ClipboardEvent} event - The clipboard event\n   */\n  handleCopy(event) {\n    this.lastActiveTime = Date.now();\n    this.log('Clipboard copy detected');\n  }\n\n  /**\n   * Handle cut events\n   * @param {ClipboardEvent} event - The clipboard event\n   */\n  handleCut(event) {\n    this.lastActiveTime = Date.now();\n    this.log('Clipboard cut detected');\n  }\n\n  /**\n   * Handle tab switch events\n   */\n  handleTabSwitch() {\n    this.tabSwitchCount++;\n    const now = Date.now();\n    this.log(`Tab switch detected (${this.tabSwitchCount} total)`);\n    if (this.tabSwitchCount >= this.suspiciousThreshold.tabSwitches) {\n      this.flagSuspiciousActivity('Excessive tab switching', {\n        count: this.tabSwitchCount,\n        threshold: this.suspiciousThreshold.tabSwitches\n      });\n    }\n  }\n\n  /**\n   * Handle tab focus events\n   */\n  handleTabFocus() {\n    this.lastActiveTime = Date.now();\n    this.log('Tab focus detected');\n  }\n\n  /**\n   * Handle visibility change events\n   */\n  handleVisibilityChange() {\n    if (document.hidden) {\n      this.handleTabSwitch();\n    } else {\n      this.handleTabFocus();\n    }\n  }\n\n  /**\n   * Check for user inactivity\n   */\n  checkInactivity() {\n    const now = Date.now();\n    const inactiveTime = now - this.lastActiveTime;\n    if (inactiveTime > this.inactivityThreshold) {\n      this.log(`Inactivity detected: ${Math.round(inactiveTime / 1000)} seconds`);\n      this.flagSuspiciousActivity('Extended inactivity', {\n        duration: inactiveTime,\n        threshold: this.inactivityThreshold\n      });\n\n      // Reset the last active time to avoid repeated alerts\n      this.lastActiveTime = now;\n    }\n  }\n\n  /**\n   * Analyze code changes for suspicious patterns\n   */\n  analyzeCodeChanges() {\n    const latestSnapshot = this.codeSnapshots[this.codeSnapshots.length - 1];\n    const previousSnapshot = this.codeSnapshots[this.codeSnapshots.length - 2];\n\n    // Simple analysis: check if a large chunk of code was added at once\n    const previousLength = previousSnapshot.code.length;\n    const currentLength = latestSnapshot.code.length;\n    const timeDiff = latestSnapshot.timestamp - previousSnapshot.timestamp;\n\n    // If code length increased by more than 50% in less than 5 seconds\n    if (currentLength > previousLength * 1.5 && timeDiff < 5000) {\n      this.flagSuspiciousActivity('Suspicious code change', {\n        previousLength,\n        currentLength,\n        timeDiff,\n        percentageIncrease: (currentLength - previousLength) / previousLength * 100\n      });\n    }\n  }\n\n  /**\n   * Analyze typing patterns for suspicious behavior\n   */\n  analyzeTypingPatterns() {\n    // Calculate typing speed\n    if (this.typingMetrics.keystrokes.length < 10) return;\n    const keystrokes = this.typingMetrics.keystrokes;\n    const totalTime = keystrokes[keystrokes.length - 1].timestamp - keystrokes[0].timestamp;\n    const charactersTyped = keystrokes.length;\n\n    // Characters per minute\n    const typingSpeed = charactersTyped / totalTime * 60000;\n    this.typingMetrics.averageSpeed = typingSpeed;\n\n    // Extremely fast typing could be suspicious\n    if (typingSpeed > 500) {\n      // More than 500 chars per minute\n      this.flagSuspiciousActivity('Unusually fast typing', {\n        speed: typingSpeed,\n        threshold: 500\n      });\n    }\n  }\n\n  /**\n   * Flag a suspicious activity\n   * @param {string} type - The type of suspicious activity\n   * @param {Object} details - Additional details about the activity\n   */\n  flagSuspiciousActivity(type, details = {}) {\n    const activity = {\n      type,\n      timestamp: Date.now(),\n      details\n    };\n    this.suspiciousActivities.push(activity);\n    this.log(`SUSPICIOUS ACTIVITY: ${type}`, details);\n\n    // In a real implementation, this could trigger a server notification\n    // or other anti-cheating measures\n    return activity;\n  }\n\n  /**\n   * Log an event\n   * @param {string} message - The log message\n   * @param {Object} data - Additional data to log\n   */\n  log(message, data = {}) {\n    const logEntry = {\n      timestamp: Date.now(),\n      message,\n      data\n    };\n    this.logs.push(logEntry);\n    console.log(`[AntiCheating] ${message}`, data);\n    return logEntry;\n  }\n\n  /**\n   * Get the current monitoring status\n   */\n  getStatus() {\n    return {\n      isMonitoring: this.isMonitoring,\n      battleId: this.battleId,\n      userId: this.userId,\n      startTime: this.startTime,\n      duration: this.startTime ? Date.now() - this.startTime : 0,\n      suspiciousActivities: this.suspiciousActivities.length,\n      metrics: {\n        tabSwitches: this.tabSwitchCount,\n        clipboardPastes: this.clipboardPasteCount,\n        typingPatterns: {\n          averageSpeed: this.typingMetrics.averageSpeed,\n          keystrokesRecorded: this.typingMetrics.keystrokes.length\n        },\n        codeSnapshots: this.codeSnapshots.length\n      }\n    };\n  }\n}\n\n// Create a singleton instance\nconst antiCheatingService = new AntiCheatingService();\nexport default antiCheatingService;","map":{"version":3,"names":["AntiCheatingService","constructor","isMonitoring","logs","suspiciousActivities","battleId","userId","startTime","monitoringIntervalId","clipboardMonitorEnabled","tabSwitchMonitorEnabled","codeAnalysisEnabled","typingPatternMonitorEnabled","screenshotIntervalId","screenshotInterval","typingMetrics","keystrokes","pauses","bursts","averageSpeed","codeSnapshots","lastActiveTime","Date","now","inactivityThreshold","tabSwitchCount","clipboardPasteCount","suspiciousThreshold","tabSwitches","clipboardPastes","inactivityPeriods","codeChanges","startMonitoring","options","stopMonitoring","clipboardMonitor","tabSwitchMonitor","codeAnalysis","typingPatternMonitor","log","setupClipboardMonitoring","setupTabSwitchMonitoring","setupTypingPatternMonitoring","setInterval","checkInactivity","screenshots","setupScreenshotCapture","clearInterval","removeClipboardMonitoring","removeTabSwitchMonitoring","removeTypingPatternMonitoring","duration","metrics","length","takeCodeSnapshot","code","push","timestamp","analyzeCodeChanges","recordKeystroke","event","key","modifiers","ctrl","ctrlKey","alt","altKey","shift","shiftKey","meta","metaKey","analyzeTypingPatterns","document","addEventListener","handlePaste","bind","handleCopy","handleCut","removeEventListener","window","handleTabSwitch","handleTabFocus","handleVisibilityChange","flagSuspiciousActivity","count","threshold","hidden","inactiveTime","Math","round","latestSnapshot","previousSnapshot","previousLength","currentLength","timeDiff","percentageIncrease","totalTime","charactersTyped","typingSpeed","speed","type","details","activity","message","data","logEntry","console","getStatus","typingPatterns","keystrokesRecorded","antiCheatingService"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/AlgoHunt/src/services/AntiCheatingService.js"],"sourcesContent":["/**\n * Anti-Cheating Service for Coding Battles\n * \n * This service provides functionality to detect and prevent cheating in coding battles.\n * It monitors various user activities and behaviors that might indicate cheating attempts.\n */\n\nclass AntiCheatingService {\n  constructor() {\n    this.isMonitoring = false;\n    this.logs = [];\n    this.suspiciousActivities = [];\n    this.battleId = null;\n    this.userId = null;\n    this.startTime = null;\n    this.monitoringIntervalId = null;\n    this.clipboardMonitorEnabled = false;\n    this.tabSwitchMonitorEnabled = false;\n    this.codeAnalysisEnabled = false;\n    this.typingPatternMonitorEnabled = false;\n    this.screenshotIntervalId = null;\n    this.screenshotInterval = 30000; // 30 seconds\n    this.typingMetrics = {\n      keystrokes: [],\n      pauses: [],\n      bursts: [],\n      averageSpeed: 0\n    };\n    this.codeSnapshots = [];\n    this.lastActiveTime = Date.now();\n    this.inactivityThreshold = 60000; // 1 minute\n    this.tabSwitchCount = 0;\n    this.clipboardPasteCount = 0;\n    this.suspiciousThreshold = {\n      tabSwitches: 10,\n      clipboardPastes: 5,\n      inactivityPeriods: 3,\n      codeChanges: 0.8 // 80% similarity threshold\n    };\n  }\n\n  /**\n   * Start monitoring for cheating behaviors\n   * @param {string} battleId - The ID of the battle\n   * @param {string} userId - The ID of the user\n   * @param {Object} options - Configuration options for monitoring\n   */\n  startMonitoring(battleId, userId, options = {}) {\n    if (this.isMonitoring) {\n      this.stopMonitoring();\n    }\n\n    this.battleId = battleId;\n    this.userId = userId;\n    this.startTime = Date.now();\n    this.isMonitoring = true;\n    this.logs = [];\n    this.suspiciousActivities = [];\n    this.tabSwitchCount = 0;\n    this.clipboardPasteCount = 0;\n    this.codeSnapshots = [];\n    this.typingMetrics = {\n      keystrokes: [],\n      pauses: [],\n      bursts: [],\n      averageSpeed: 0\n    };\n\n    // Configure monitoring options\n    this.clipboardMonitorEnabled = options.clipboardMonitor !== false;\n    this.tabSwitchMonitorEnabled = options.tabSwitchMonitor !== false;\n    this.codeAnalysisEnabled = options.codeAnalysis !== false;\n    this.typingPatternMonitorEnabled = options.typingPatternMonitor !== false;\n\n    this.log('Anti-cheating monitoring started');\n\n    // Set up event listeners\n    if (this.clipboardMonitorEnabled) {\n      this.setupClipboardMonitoring();\n    }\n\n    if (this.tabSwitchMonitorEnabled) {\n      this.setupTabSwitchMonitoring();\n    }\n\n    if (this.typingPatternMonitorEnabled) {\n      this.setupTypingPatternMonitoring();\n    }\n\n    // Set up periodic monitoring\n    this.monitoringIntervalId = setInterval(() => {\n      this.checkInactivity();\n    }, 10000); // Check every 10 seconds\n\n    // Take periodic screenshots if enabled\n    if (options.screenshots) {\n      this.setupScreenshotCapture();\n    }\n\n    return true;\n  }\n\n  /**\n   * Stop all monitoring activities\n   */\n  stopMonitoring() {\n    if (!this.isMonitoring) return;\n\n    // Clear intervals\n    if (this.monitoringIntervalId) {\n      clearInterval(this.monitoringIntervalId);\n      this.monitoringIntervalId = null;\n    }\n\n    if (this.screenshotIntervalId) {\n      clearInterval(this.screenshotIntervalId);\n      this.screenshotIntervalId = null;\n    }\n\n    // Remove event listeners\n    this.removeClipboardMonitoring();\n    this.removeTabSwitchMonitoring();\n    this.removeTypingPatternMonitoring();\n\n    this.log('Anti-cheating monitoring stopped');\n    this.isMonitoring = false;\n\n    return {\n      battleId: this.battleId,\n      userId: this.userId,\n      duration: Date.now() - this.startTime,\n      logs: this.logs,\n      suspiciousActivities: this.suspiciousActivities,\n      metrics: {\n        tabSwitches: this.tabSwitchCount,\n        clipboardPastes: this.clipboardPasteCount,\n        typingMetrics: this.typingMetrics,\n        codeSnapshots: this.codeSnapshots.length\n      }\n    };\n  }\n\n  /**\n   * Take a snapshot of the current code\n   * @param {string} code - The current code in the editor\n   */\n  takeCodeSnapshot(code) {\n    if (!this.isMonitoring || !this.codeAnalysisEnabled) return;\n\n    this.codeSnapshots.push({\n      timestamp: Date.now(),\n      code\n    });\n\n    // Analyze for suspicious code changes if we have multiple snapshots\n    if (this.codeSnapshots.length > 1) {\n      this.analyzeCodeChanges();\n    }\n  }\n\n  /**\n   * Record a keystroke for typing pattern analysis\n   * @param {KeyboardEvent} event - The keyboard event\n   */\n  recordKeystroke(event) {\n    if (!this.isMonitoring || !this.typingPatternMonitorEnabled) return;\n\n    const now = Date.now();\n    this.lastActiveTime = now;\n\n    this.typingMetrics.keystrokes.push({\n      key: event.key,\n      timestamp: now,\n      modifiers: {\n        ctrl: event.ctrlKey,\n        alt: event.altKey,\n        shift: event.shiftKey,\n        meta: event.metaKey\n      }\n    });\n\n    // Calculate typing speed and patterns periodically\n    if (this.typingMetrics.keystrokes.length % 50 === 0) {\n      this.analyzeTypingPatterns();\n    }\n  }\n\n  /**\n   * Setup clipboard monitoring\n   */\n  setupClipboardMonitoring() {\n    document.addEventListener('paste', this.handlePaste.bind(this));\n    document.addEventListener('copy', this.handleCopy.bind(this));\n    document.addEventListener('cut', this.handleCut.bind(this));\n  }\n\n  /**\n   * Remove clipboard monitoring\n   */\n  removeClipboardMonitoring() {\n    document.removeEventListener('paste', this.handlePaste.bind(this));\n    document.removeEventListener('copy', this.handleCopy.bind(this));\n    document.removeEventListener('cut', this.handleCut.bind(this));\n  }\n\n  /**\n   * Setup tab switch monitoring\n   */\n  setupTabSwitchMonitoring() {\n    window.addEventListener('blur', this.handleTabSwitch.bind(this));\n    window.addEventListener('focus', this.handleTabFocus.bind(this));\n    document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n  }\n\n  /**\n   * Remove tab switch monitoring\n   */\n  removeTabSwitchMonitoring() {\n    window.removeEventListener('blur', this.handleTabSwitch.bind(this));\n    window.removeEventListener('focus', this.handleTabFocus.bind(this));\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n  }\n\n  /**\n   * Setup typing pattern monitoring\n   */\n  setupTypingPatternMonitoring() {\n    document.addEventListener('keydown', this.recordKeystroke.bind(this));\n  }\n\n  /**\n   * Remove typing pattern monitoring\n   */\n  removeTypingPatternMonitoring() {\n    document.removeEventListener('keydown', this.recordKeystroke.bind(this));\n  }\n\n  /**\n   * Setup periodic screenshot capture\n   */\n  setupScreenshotCapture() {\n    // In a real implementation, this would capture the screen\n    // For this demo, we'll just log that a screenshot would be taken\n    this.screenshotIntervalId = setInterval(() => {\n      this.log('Screenshot captured');\n    }, this.screenshotInterval);\n  }\n\n  /**\n   * Handle paste events\n   * @param {ClipboardEvent} event - The clipboard event\n   */\n  handlePaste(event) {\n    this.clipboardPasteCount++;\n    this.lastActiveTime = Date.now();\n    \n    this.log(`Clipboard paste detected (${this.clipboardPasteCount} total)`);\n    \n    if (this.clipboardPasteCount >= this.suspiciousThreshold.clipboardPastes) {\n      this.flagSuspiciousActivity('Excessive clipboard usage', {\n        count: this.clipboardPasteCount,\n        threshold: this.suspiciousThreshold.clipboardPastes\n      });\n    }\n  }\n\n  /**\n   * Handle copy events\n   * @param {ClipboardEvent} event - The clipboard event\n   */\n  handleCopy(event) {\n    this.lastActiveTime = Date.now();\n    this.log('Clipboard copy detected');\n  }\n\n  /**\n   * Handle cut events\n   * @param {ClipboardEvent} event - The clipboard event\n   */\n  handleCut(event) {\n    this.lastActiveTime = Date.now();\n    this.log('Clipboard cut detected');\n  }\n\n  /**\n   * Handle tab switch events\n   */\n  handleTabSwitch() {\n    this.tabSwitchCount++;\n    const now = Date.now();\n    \n    this.log(`Tab switch detected (${this.tabSwitchCount} total)`);\n    \n    if (this.tabSwitchCount >= this.suspiciousThreshold.tabSwitches) {\n      this.flagSuspiciousActivity('Excessive tab switching', {\n        count: this.tabSwitchCount,\n        threshold: this.suspiciousThreshold.tabSwitches\n      });\n    }\n  }\n\n  /**\n   * Handle tab focus events\n   */\n  handleTabFocus() {\n    this.lastActiveTime = Date.now();\n    this.log('Tab focus detected');\n  }\n\n  /**\n   * Handle visibility change events\n   */\n  handleVisibilityChange() {\n    if (document.hidden) {\n      this.handleTabSwitch();\n    } else {\n      this.handleTabFocus();\n    }\n  }\n\n  /**\n   * Check for user inactivity\n   */\n  checkInactivity() {\n    const now = Date.now();\n    const inactiveTime = now - this.lastActiveTime;\n    \n    if (inactiveTime > this.inactivityThreshold) {\n      this.log(`Inactivity detected: ${Math.round(inactiveTime / 1000)} seconds`);\n      this.flagSuspiciousActivity('Extended inactivity', {\n        duration: inactiveTime,\n        threshold: this.inactivityThreshold\n      });\n      \n      // Reset the last active time to avoid repeated alerts\n      this.lastActiveTime = now;\n    }\n  }\n\n  /**\n   * Analyze code changes for suspicious patterns\n   */\n  analyzeCodeChanges() {\n    const latestSnapshot = this.codeSnapshots[this.codeSnapshots.length - 1];\n    const previousSnapshot = this.codeSnapshots[this.codeSnapshots.length - 2];\n    \n    // Simple analysis: check if a large chunk of code was added at once\n    const previousLength = previousSnapshot.code.length;\n    const currentLength = latestSnapshot.code.length;\n    const timeDiff = latestSnapshot.timestamp - previousSnapshot.timestamp;\n    \n    // If code length increased by more than 50% in less than 5 seconds\n    if (currentLength > previousLength * 1.5 && timeDiff < 5000) {\n      this.flagSuspiciousActivity('Suspicious code change', {\n        previousLength,\n        currentLength,\n        timeDiff,\n        percentageIncrease: ((currentLength - previousLength) / previousLength) * 100\n      });\n    }\n  }\n\n  /**\n   * Analyze typing patterns for suspicious behavior\n   */\n  analyzeTypingPatterns() {\n    // Calculate typing speed\n    if (this.typingMetrics.keystrokes.length < 10) return;\n    \n    const keystrokes = this.typingMetrics.keystrokes;\n    const totalTime = keystrokes[keystrokes.length - 1].timestamp - keystrokes[0].timestamp;\n    const charactersTyped = keystrokes.length;\n    \n    // Characters per minute\n    const typingSpeed = (charactersTyped / totalTime) * 60000;\n    this.typingMetrics.averageSpeed = typingSpeed;\n    \n    // Extremely fast typing could be suspicious\n    if (typingSpeed > 500) { // More than 500 chars per minute\n      this.flagSuspiciousActivity('Unusually fast typing', {\n        speed: typingSpeed,\n        threshold: 500\n      });\n    }\n  }\n\n  /**\n   * Flag a suspicious activity\n   * @param {string} type - The type of suspicious activity\n   * @param {Object} details - Additional details about the activity\n   */\n  flagSuspiciousActivity(type, details = {}) {\n    const activity = {\n      type,\n      timestamp: Date.now(),\n      details\n    };\n    \n    this.suspiciousActivities.push(activity);\n    this.log(`SUSPICIOUS ACTIVITY: ${type}`, details);\n    \n    // In a real implementation, this could trigger a server notification\n    // or other anti-cheating measures\n    return activity;\n  }\n\n  /**\n   * Log an event\n   * @param {string} message - The log message\n   * @param {Object} data - Additional data to log\n   */\n  log(message, data = {}) {\n    const logEntry = {\n      timestamp: Date.now(),\n      message,\n      data\n    };\n    \n    this.logs.push(logEntry);\n    console.log(`[AntiCheating] ${message}`, data);\n    \n    return logEntry;\n  }\n\n  /**\n   * Get the current monitoring status\n   */\n  getStatus() {\n    return {\n      isMonitoring: this.isMonitoring,\n      battleId: this.battleId,\n      userId: this.userId,\n      startTime: this.startTime,\n      duration: this.startTime ? Date.now() - this.startTime : 0,\n      suspiciousActivities: this.suspiciousActivities.length,\n      metrics: {\n        tabSwitches: this.tabSwitchCount,\n        clipboardPastes: this.clipboardPasteCount,\n        typingPatterns: {\n          averageSpeed: this.typingMetrics.averageSpeed,\n          keystrokesRecorded: this.typingMetrics.keystrokes.length\n        },\n        codeSnapshots: this.codeSnapshots.length\n      }\n    };\n  }\n}\n\n// Create a singleton instance\nconst antiCheatingService = new AntiCheatingService();\n\nexport default antiCheatingService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}